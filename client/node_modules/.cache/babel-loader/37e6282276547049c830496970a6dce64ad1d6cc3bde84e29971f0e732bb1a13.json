{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"head\", null, [/*#__PURE__*/_createElementVNode(\"title\", null, \" Speech To Text\"), /*#__PURE__*/_createCommentVNode(\" <link rel=\\\"stylesheet\\\" href=\\\"../style/style.css\\\"> \")], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h1\", null, \"Speech to Text\"), /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"start-btn\"\n}, \"Start Recording\"), /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"stop-btn\",\n  disabled: \"\"\n}, \"Stop Recording\"), /*#__PURE__*/_createElementVNode(\"p\", {\n  id: \"text\"\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_createCommentVNode","id","disabled","_hoisted_1","_hoisted_2"],"sources":["D:\\kuliah\\Sem 4\\Tekmul\\vue-router\\client\\src\\views\\main.vue"],"sourcesContent":["<template>\r\n<head>\r\n  <title> Speech To Text</title>\r\n  <!-- <link rel=\"stylesheet\" href=\"../style/style.css\"> -->\r\n</head>\r\n  <body>\r\n    <h1>Speech to Text</h1>\r\n    <button id=\"start-btn\">Start Recording</button>\r\n    <button id=\"stop-btn\" disabled>Stop Recording</button>\r\n    <p id=\"text\"></p>\r\n  </body>\r\n</template>\r\n\r\n\r\n<script>\r\nconst speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst recognition = new speechRecognition();\r\n\r\nrecognition.lang = 'id-ID';\r\nrecognition.interimResults = true;\r\nrecognition.maxAlternatives = 1;\r\n\r\nconst startBtn = document.getElementById('start-btn');\r\nconst stopBtn = document.getElementById('stop-btn');\r\nconst text = document.getElementById('text');\r\n\r\nlet transcript = '';\r\n\r\n\r\nexport default {\r\n  data(){\r\n    return{\r\n\r\n    }\r\n  },\r\n  methods:{\r\n    startRecord(){\r\n      recognition.onstart = () => {\r\n        console.log('Speech recognition service has started');\r\n        startBtn.disabled = true;\r\n        stopBtn.disabled = false;\r\n      }\r\n    },\r\n    stopRecord(){\r\n      recognition.onend = () => {\r\n        console.log('Speech recognition service has started');\r\n        startBtn.disabled = false;\r\n        stopBtn.disabled = true;\r\n      };\r\n    }\r\n  }  \r\n}\r\n\r\n\r\nrecognition.onstart = () => {\r\n  console.log('Speech recognition service has started');\r\n  startBtn.disabled = true;\r\n  stopBtn.disabled = false;\r\n};\r\n\r\nrecognition.onresult = (event) => {\r\n  const resultIndex = event.resultIndex;\r\n  const transcript = event.results[resultIndex][0].transcript;\r\n  console.log(transcript);\r\n  text.innerHTML = transcript;\r\n};\r\n\r\nrecognition.onend = () => {\r\n  console.log('Speech recognition service disconnected');\r\n  startBtn.disabled = false;\r\n  stopBtn.disabled = true;\r\n};\r\n\r\nrecognition.onerror = (event) => {\r\n  console.log('Error occurred in recognition: ' + event.error);\r\n};\r\n\r\nstartBtn.addEventListener('click', () => {\r\n  recognition.start();\r\n});\r\n\r\nstopBtn.addEventListener('click', () => {\r\n  recognition.stop();\r\n});\r\n</script>\r\n  "],"mappings":";gCACAA,mBAAA,CAGO,e,aAFLA,mBAAA,CAA8B,eAAvB,iBAAe,G,aACtBC,mBAAA,2DAA0D,C;gCAE1DD,mBAAA,CAKO,e,aAJLA,mBAAA,CAAuB,YAAnB,gBAAc,G,aAClBA,mBAAA,CAA+C;EAAvCE,EAAE,EAAC;AAAW,GAAC,iBAAe,G,aACtCF,mBAAA,CAAsD;EAA9CE,EAAE,EAAC,UAAU;EAACC,QAAQ,EAAR;GAAS,gBAAc,G,aAC7CH,mBAAA,CAAiB;EAAdE,EAAE,EAAC;AAAM,G;;;6DARhBE,UAGO,EACLC,UAKO,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}