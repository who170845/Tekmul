{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/esnext.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/esnext.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/esnext.typed-array.with.js\");\nrequire(\"core-js/modules/web.dom-exception.stack.js\");\n/**\n * web-streams-polyfill v3.2.1\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /// <reference lib=\"es2015.symbol\" />\n  const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol : description => `Symbol(${description})`;\n\n  /// <reference lib=\"dom\" />\n  function noop() {\n    return undefined;\n  }\n  function getGlobals() {\n    if (typeof self !== 'undefined') {\n      return self;\n    } else if (typeof window !== 'undefined') {\n      return window;\n    } else if (typeof global !== 'undefined') {\n      return global;\n    }\n    return undefined;\n  }\n  const globals = getGlobals();\n  function typeIsObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n  const rethrowAssertionErrorRejection = noop;\n  const originalPromise = Promise;\n  const originalPromiseThen = Promise.prototype.then;\n  const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n  const originalPromiseReject = Promise.reject.bind(originalPromise);\n  function newPromise(executor) {\n    return new originalPromise(executor);\n  }\n  function promiseResolvedWith(value) {\n    return originalPromiseResolve(value);\n  }\n  function promiseRejectedWith(reason) {\n    return originalPromiseReject(reason);\n  }\n  function PerformPromiseThen(promise, onFulfilled, onRejected) {\n    // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n    // approximation.\n    return originalPromiseThen.call(promise, onFulfilled, onRejected);\n  }\n  function uponPromise(promise, onFulfilled, onRejected) {\n    PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n  }\n  function uponFulfillment(promise, onFulfilled) {\n    uponPromise(promise, onFulfilled);\n  }\n  function uponRejection(promise, onRejected) {\n    uponPromise(promise, undefined, onRejected);\n  }\n  function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n    return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n  }\n  function setPromiseIsHandledToTrue(promise) {\n    PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n  }\n  const queueMicrotask = (() => {\n    const globalQueueMicrotask = globals && globals.queueMicrotask;\n    if (typeof globalQueueMicrotask === 'function') {\n      return globalQueueMicrotask;\n    }\n    const resolvedPromise = promiseResolvedWith(undefined);\n    return fn => PerformPromiseThen(resolvedPromise, fn);\n  })();\n  function reflectCall(F, V, args) {\n    if (typeof F !== 'function') {\n      throw new TypeError('Argument is not a function');\n    }\n    return Function.prototype.apply.call(F, V, args);\n  }\n  function promiseCall(F, V, args) {\n    try {\n      return promiseResolvedWith(reflectCall(F, V, args));\n    } catch (value) {\n      return promiseRejectedWith(value);\n    }\n  }\n\n  // Original from Chromium\n  // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n  const QUEUE_MAX_ARRAY_SIZE = 16384;\n  /**\n   * Simple queue structure.\n   *\n   * Avoids scalability issues with using a packed array directly by using\n   * multiple arrays in a linked list and keeping the array size bounded.\n   */\n  class SimpleQueue {\n    constructor() {\n      this._cursor = 0;\n      this._size = 0;\n      // _front and _back are always defined.\n      this._front = {\n        _elements: [],\n        _next: undefined\n      };\n      this._back = this._front;\n      // The cursor is used to avoid calling Array.shift().\n      // It contains the index of the front element of the array inside the\n      // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n      this._cursor = 0;\n      // When there is only one node, size === elements.length - cursor.\n      this._size = 0;\n    }\n    get length() {\n      return this._size;\n    }\n    // For exception safety, this method is structured in order:\n    // 1. Read state\n    // 2. Calculate required state mutations\n    // 3. Perform state mutations\n    push(element) {\n      const oldBack = this._back;\n      let newBack = oldBack;\n      if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n        newBack = {\n          _elements: [],\n          _next: undefined\n        };\n      }\n      // push() is the mutation most likely to throw an exception, so it\n      // goes first.\n      oldBack._elements.push(element);\n      if (newBack !== oldBack) {\n        this._back = newBack;\n        oldBack._next = newBack;\n      }\n      ++this._size;\n    }\n    // Like push(), shift() follows the read -> calculate -> mutate pattern for\n    // exception safety.\n    shift() {\n      // must not be called on an empty queue\n      const oldFront = this._front;\n      let newFront = oldFront;\n      const oldCursor = this._cursor;\n      let newCursor = oldCursor + 1;\n      const elements = oldFront._elements;\n      const element = elements[oldCursor];\n      if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n        newFront = oldFront._next;\n        newCursor = 0;\n      }\n      // No mutations before this point.\n      --this._size;\n      this._cursor = newCursor;\n      if (oldFront !== newFront) {\n        this._front = newFront;\n      }\n      // Permit shifted element to be garbage collected.\n      elements[oldCursor] = undefined;\n      return element;\n    }\n    // The tricky thing about forEach() is that it can be called\n    // re-entrantly. The queue may be mutated inside the callback. It is easy to\n    // see that push() within the callback has no negative effects since the end\n    // of the queue is checked for on every iteration. If shift() is called\n    // repeatedly within the callback then the next iteration may return an\n    // element that has been removed. In this case the callback will be called\n    // with undefined values until we either \"catch up\" with elements that still\n    // exist or reach the back of the queue.\n    forEach(callback) {\n      let i = this._cursor;\n      let node = this._front;\n      let elements = node._elements;\n      while (i !== elements.length || node._next !== undefined) {\n        if (i === elements.length) {\n          node = node._next;\n          elements = node._elements;\n          i = 0;\n          if (elements.length === 0) {\n            break;\n          }\n        }\n        callback(elements[i]);\n        ++i;\n      }\n    }\n    // Return the element that would be returned if shift() was called now,\n    // without modifying the queue.\n    peek() {\n      // must not be called on an empty queue\n      const front = this._front;\n      const cursor = this._cursor;\n      return front._elements[cursor];\n    }\n  }\n  function ReadableStreamReaderGenericInitialize(reader, stream) {\n    reader._ownerReadableStream = stream;\n    stream._reader = reader;\n    if (stream._state === 'readable') {\n      defaultReaderClosedPromiseInitialize(reader);\n    } else if (stream._state === 'closed') {\n      defaultReaderClosedPromiseInitializeAsResolved(reader);\n    } else {\n      defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    }\n  }\n  // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n  // check.\n  function ReadableStreamReaderGenericCancel(reader, reason) {\n    const stream = reader._ownerReadableStream;\n    return ReadableStreamCancel(stream, reason);\n  }\n  function ReadableStreamReaderGenericRelease(reader) {\n    if (reader._ownerReadableStream._state === 'readable') {\n      defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n    } else {\n      defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n    }\n    reader._ownerReadableStream._reader = undefined;\n    reader._ownerReadableStream = undefined;\n  }\n  // Helper functions for the readers.\n  function readerLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released reader');\n  }\n  // Helper functions for the ReadableStreamDefaultReader.\n  function defaultReaderClosedPromiseInitialize(reader) {\n    reader._closedPromise = newPromise((resolve, reject) => {\n      reader._closedPromise_resolve = resolve;\n      reader._closedPromise_reject = reject;\n    });\n  }\n  function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseReject(reader, reason);\n  }\n  function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseResolve(reader);\n  }\n  function defaultReaderClosedPromiseReject(reader, reason) {\n    if (reader._closedPromise_reject === undefined) {\n      return;\n    }\n    setPromiseIsHandledToTrue(reader._closedPromise);\n    reader._closedPromise_reject(reason);\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n  function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n    defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n  }\n  function defaultReaderClosedPromiseResolve(reader) {\n    if (reader._closedPromise_resolve === undefined) {\n      return;\n    }\n    reader._closedPromise_resolve(undefined);\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n  const AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n  const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n  const CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n  const PullSteps = SymbolPolyfill('[[PullSteps]]');\n\n  /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n  const NumberIsFinite = Number.isFinite || function (x) {\n    return typeof x === 'number' && isFinite(x);\n  };\n\n  /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n  const MathTrunc = Math.trunc || function (v) {\n    return v < 0 ? Math.ceil(v) : Math.floor(v);\n  };\n\n  // https://heycam.github.io/webidl/#idl-dictionaries\n  function isDictionary(x) {\n    return typeof x === 'object' || typeof x === 'function';\n  }\n  function assertDictionary(obj, context) {\n    if (obj !== undefined && !isDictionary(obj)) {\n      throw new TypeError(`${context} is not an object.`);\n    }\n  }\n  // https://heycam.github.io/webidl/#idl-callback-functions\n  function assertFunction(x, context) {\n    if (typeof x !== 'function') {\n      throw new TypeError(`${context} is not a function.`);\n    }\n  }\n  // https://heycam.github.io/webidl/#idl-object\n  function isObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n  function assertObject(x, context) {\n    if (!isObject(x)) {\n      throw new TypeError(`${context} is not an object.`);\n    }\n  }\n  function assertRequiredArgument(x, position, context) {\n    if (x === undefined) {\n      throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n    }\n  }\n  function assertRequiredField(x, field, context) {\n    if (x === undefined) {\n      throw new TypeError(`${field} is required in '${context}'.`);\n    }\n  }\n  // https://heycam.github.io/webidl/#idl-unrestricted-double\n  function convertUnrestrictedDouble(value) {\n    return Number(value);\n  }\n  function censorNegativeZero(x) {\n    return x === 0 ? 0 : x;\n  }\n  function integerPart(x) {\n    return censorNegativeZero(MathTrunc(x));\n  }\n  // https://heycam.github.io/webidl/#idl-unsigned-long-long\n  function convertUnsignedLongLongWithEnforceRange(value, context) {\n    const lowerBound = 0;\n    const upperBound = Number.MAX_SAFE_INTEGER;\n    let x = Number(value);\n    x = censorNegativeZero(x);\n    if (!NumberIsFinite(x)) {\n      throw new TypeError(`${context} is not a finite number`);\n    }\n    x = integerPart(x);\n    if (x < lowerBound || x > upperBound) {\n      throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n    }\n    if (!NumberIsFinite(x) || x === 0) {\n      return 0;\n    }\n    // TODO Use BigInt if supported?\n    // let xBigInt = BigInt(integerPart(x));\n    // xBigInt = BigInt.asUintN(64, xBigInt);\n    // return Number(xBigInt);\n    return x;\n  }\n  function assertReadableStream(x, context) {\n    if (!IsReadableStream(x)) {\n      throw new TypeError(`${context} is not a ReadableStream.`);\n    }\n  }\n\n  // Abstract operations for the ReadableStream.\n  function AcquireReadableStreamDefaultReader(stream) {\n    return new ReadableStreamDefaultReader(stream);\n  }\n  // ReadableStream API exposed for controllers.\n  function ReadableStreamAddReadRequest(stream, readRequest) {\n    stream._reader._readRequests.push(readRequest);\n  }\n  function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n    const reader = stream._reader;\n    const readRequest = reader._readRequests.shift();\n    if (done) {\n      readRequest._closeSteps();\n    } else {\n      readRequest._chunkSteps(chunk);\n    }\n  }\n  function ReadableStreamGetNumReadRequests(stream) {\n    return stream._reader._readRequests.length;\n  }\n  function ReadableStreamHasDefaultReader(stream) {\n    const reader = stream._reader;\n    if (reader === undefined) {\n      return false;\n    }\n    if (!IsReadableStreamDefaultReader(reader)) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * A default reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n  class ReadableStreamDefaultReader {\n    constructor(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n      assertReadableStream(stream, 'First parameter');\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readRequests = new SimpleQueue();\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed,\n     * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n     */\n    get closed() {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n      }\n      return this._closedPromise;\n    }\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n    cancel(reason = undefined) {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n      }\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n      return ReadableStreamReaderGenericCancel(this, reason);\n    }\n    /**\n     * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n    read() {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n      }\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n      let resolvePromise;\n      let rejectPromise;\n      const promise = newPromise((resolve, reject) => {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      const readRequest = {\n        _chunkSteps: chunk => resolvePromise({\n          value: chunk,\n          done: false\n        }),\n        _closeSteps: () => resolvePromise({\n          value: undefined,\n          done: true\n        }),\n        _errorSteps: e => rejectPromise(e)\n      };\n      ReadableStreamDefaultReaderRead(this, readRequest);\n      return promise;\n    }\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n    releaseLock() {\n      if (!IsReadableStreamDefaultReader(this)) {\n        throw defaultReaderBrandCheckException('releaseLock');\n      }\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n      if (this._readRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n      ReadableStreamReaderGenericRelease(this);\n    }\n  }\n  Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultReader',\n      configurable: true\n    });\n  }\n  // Abstract operations for the readers.\n  function IsReadableStreamDefaultReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n      return false;\n    }\n    return x instanceof ReadableStreamDefaultReader;\n  }\n  function ReadableStreamDefaultReaderRead(reader, readRequest) {\n    const stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n    if (stream._state === 'closed') {\n      readRequest._closeSteps();\n    } else if (stream._state === 'errored') {\n      readRequest._errorSteps(stream._storedError);\n    } else {\n      stream._readableStreamController[PullSteps](readRequest);\n    }\n  }\n  // Helper functions for the ReadableStreamDefaultReader.\n  function defaultReaderBrandCheckException(name) {\n    return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n  }\n\n  /// <reference lib=\"es2018.asynciterable\" />\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {}).prototype);\n\n  /// <reference lib=\"es2018.asynciterable\" />\n  class ReadableStreamAsyncIteratorImpl {\n    constructor(reader, preventCancel) {\n      this._ongoingPromise = undefined;\n      this._isFinished = false;\n      this._reader = reader;\n      this._preventCancel = preventCancel;\n    }\n    next() {\n      const nextSteps = () => this._nextSteps();\n      this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n      return this._ongoingPromise;\n    }\n    return(value) {\n      const returnSteps = () => this._returnSteps(value);\n      return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n    }\n    _nextSteps() {\n      if (this._isFinished) {\n        return Promise.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      const reader = this._reader;\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('iterate'));\n      }\n      let resolvePromise;\n      let rejectPromise;\n      const promise = newPromise((resolve, reject) => {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      const readRequest = {\n        _chunkSteps: chunk => {\n          this._ongoingPromise = undefined;\n          // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n          // FIXME Is this a bug in the specification, or in the test?\n          queueMicrotask(() => resolvePromise({\n            value: chunk,\n            done: false\n          }));\n        },\n        _closeSteps: () => {\n          this._ongoingPromise = undefined;\n          this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          resolvePromise({\n            value: undefined,\n            done: true\n          });\n        },\n        _errorSteps: reason => {\n          this._ongoingPromise = undefined;\n          this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          rejectPromise(reason);\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promise;\n    }\n    _returnSteps(value) {\n      if (this._isFinished) {\n        return Promise.resolve({\n          value,\n          done: true\n        });\n      }\n      this._isFinished = true;\n      const reader = this._reader;\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('finish iterating'));\n      }\n      if (!this._preventCancel) {\n        const result = ReadableStreamReaderGenericCancel(reader, value);\n        ReadableStreamReaderGenericRelease(reader);\n        return transformPromiseWith(result, () => ({\n          value,\n          done: true\n        }));\n      }\n      ReadableStreamReaderGenericRelease(reader);\n      return promiseResolvedWith({\n        value,\n        done: true\n      });\n    }\n  }\n  const ReadableStreamAsyncIteratorPrototype = {\n    next() {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n      }\n      return this._asyncIteratorImpl.next();\n    },\n    return(value) {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n      }\n      return this._asyncIteratorImpl.return(value);\n    }\n  };\n  if (AsyncIteratorPrototype !== undefined) {\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n  }\n  // Abstract operations for the ReadableStream.\n  function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n    const reader = AcquireReadableStreamDefaultReader(stream);\n    const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n    const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n    iterator._asyncIteratorImpl = impl;\n    return iterator;\n  }\n  function IsReadableStreamAsyncIterator(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n      return false;\n    }\n    try {\n      // noinspection SuspiciousTypeOfGuard\n      return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n    } catch (_a) {\n      return false;\n    }\n  }\n  // Helper functions for the ReadableStream.\n  function streamAsyncIteratorBrandCheckException(name) {\n    return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n  }\n\n  /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n  const NumberIsNaN = Number.isNaN || function (x) {\n    // eslint-disable-next-line no-self-compare\n    return x !== x;\n  };\n  function CreateArrayFromList(elements) {\n    // We use arrays to represent lists, so this is basically a no-op.\n    // Do a slice though just in case we happen to depend on the unique-ness.\n    return elements.slice();\n  }\n  function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n    new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n  }\n  // Not implemented correctly\n  function TransferArrayBuffer(O) {\n    return O;\n  }\n  // Not implemented correctly\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function IsDetachedBuffer(O) {\n    return false;\n  }\n  function ArrayBufferSlice(buffer, begin, end) {\n    // ArrayBuffer.prototype.slice is not available on IE10\n    // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n    if (buffer.slice) {\n      return buffer.slice(begin, end);\n    }\n    const length = end - begin;\n    const slice = new ArrayBuffer(length);\n    CopyDataBlockBytes(slice, 0, buffer, begin, length);\n    return slice;\n  }\n  function IsNonNegativeNumber(v) {\n    if (typeof v !== 'number') {\n      return false;\n    }\n    if (NumberIsNaN(v)) {\n      return false;\n    }\n    if (v < 0) {\n      return false;\n    }\n    return true;\n  }\n  function CloneAsUint8Array(O) {\n    const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n    return new Uint8Array(buffer);\n  }\n  function DequeueValue(container) {\n    const pair = container._queue.shift();\n    container._queueTotalSize -= pair.size;\n    if (container._queueTotalSize < 0) {\n      container._queueTotalSize = 0;\n    }\n    return pair.value;\n  }\n  function EnqueueValueWithSize(container, value, size) {\n    if (!IsNonNegativeNumber(size) || size === Infinity) {\n      throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n    }\n    container._queue.push({\n      value,\n      size\n    });\n    container._queueTotalSize += size;\n  }\n  function PeekQueueValue(container) {\n    const pair = container._queue.peek();\n    return pair.value;\n  }\n  function ResetQueue(container) {\n    container._queue = new SimpleQueue();\n    container._queueTotalSize = 0;\n  }\n\n  /**\n   * A pull-into request in a {@link ReadableByteStreamController}.\n   *\n   * @public\n   */\n  class ReadableStreamBYOBRequest {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n     */\n    get view() {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('view');\n      }\n      return this._view;\n    }\n    respond(bytesWritten) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respond');\n      }\n      assertRequiredArgument(bytesWritten, 1, 'respond');\n      bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n      if (IsDetachedBuffer(this._view.buffer)) ;\n      ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n    }\n    respondWithNewView(view) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respondWithNewView');\n      }\n      assertRequiredArgument(view, 1, 'respondWithNewView');\n      if (!ArrayBuffer.isView(view)) {\n        throw new TypeError('You can only respond with array buffer views');\n      }\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n      if (IsDetachedBuffer(view.buffer)) ;\n      ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n    }\n  }\n  Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n    respond: {\n      enumerable: true\n    },\n    respondWithNewView: {\n      enumerable: true\n    },\n    view: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBRequest',\n      configurable: true\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n   *\n   * @public\n   */\n  class ReadableByteStreamController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the current BYOB pull request, or `null` if there isn't one.\n     */\n    get byobRequest() {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('byobRequest');\n      }\n      return ReadableByteStreamControllerGetBYOBRequest(this);\n    }\n    /**\n     * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n     * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n     */\n    get desiredSize() {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('desiredSize');\n      }\n      return ReadableByteStreamControllerGetDesiredSize(this);\n    }\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n    close() {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('close');\n      }\n      if (this._closeRequested) {\n        throw new TypeError('The stream has already been closed; do not close it again!');\n      }\n      const state = this._controlledReadableByteStream._state;\n      if (state !== 'readable') {\n        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n      }\n      ReadableByteStreamControllerClose(this);\n    }\n    enqueue(chunk) {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('enqueue');\n      }\n      assertRequiredArgument(chunk, 1, 'enqueue');\n      if (!ArrayBuffer.isView(chunk)) {\n        throw new TypeError('chunk must be an array buffer view');\n      }\n      if (chunk.byteLength === 0) {\n        throw new TypeError('chunk must have non-zero byteLength');\n      }\n      if (chunk.buffer.byteLength === 0) {\n        throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n      }\n      if (this._closeRequested) {\n        throw new TypeError('stream is closed or draining');\n      }\n      const state = this._controlledReadableByteStream._state;\n      if (state !== 'readable') {\n        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n      }\n      ReadableByteStreamControllerEnqueue(this, chunk);\n    }\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n    error(e = undefined) {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('error');\n      }\n      ReadableByteStreamControllerError(this, e);\n    }\n    /** @internal */\n    [CancelSteps](reason) {\n      ReadableByteStreamControllerClearPendingPullIntos(this);\n      ResetQueue(this);\n      const result = this._cancelAlgorithm(reason);\n      ReadableByteStreamControllerClearAlgorithms(this);\n      return result;\n    }\n    /** @internal */\n    [PullSteps](readRequest) {\n      const stream = this._controlledReadableByteStream;\n      if (this._queueTotalSize > 0) {\n        const entry = this._queue.shift();\n        this._queueTotalSize -= entry.byteLength;\n        ReadableByteStreamControllerHandleQueueDrain(this);\n        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n        readRequest._chunkSteps(view);\n        return;\n      }\n      const autoAllocateChunkSize = this._autoAllocateChunkSize;\n      if (autoAllocateChunkSize !== undefined) {\n        let buffer;\n        try {\n          buffer = new ArrayBuffer(autoAllocateChunkSize);\n        } catch (bufferE) {\n          readRequest._errorSteps(bufferE);\n          return;\n        }\n        const pullIntoDescriptor = {\n          buffer,\n          bufferByteLength: autoAllocateChunkSize,\n          byteOffset: 0,\n          byteLength: autoAllocateChunkSize,\n          bytesFilled: 0,\n          elementSize: 1,\n          viewConstructor: Uint8Array,\n          readerType: 'default'\n        };\n        this._pendingPullIntos.push(pullIntoDescriptor);\n      }\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableByteStreamControllerCallPullIfNeeded(this);\n    }\n  }\n  Object.defineProperties(ReadableByteStreamController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    byobRequest: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableByteStreamController',\n      configurable: true\n    });\n  }\n  // Abstract operations for the ReadableByteStreamController.\n  function IsReadableByteStreamController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n      return false;\n    }\n    return x instanceof ReadableByteStreamController;\n  }\n  function IsReadableStreamBYOBRequest(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n      return false;\n    }\n    return x instanceof ReadableStreamBYOBRequest;\n  }\n  function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n    const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n    if (!shouldPull) {\n      return;\n    }\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n    controller._pulling = true;\n    // TODO: Test controller argument\n    const pullPromise = controller._pullAlgorithm();\n    uponPromise(pullPromise, () => {\n      controller._pulling = false;\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    }, e => {\n      ReadableByteStreamControllerError(controller, e);\n    });\n  }\n  function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    controller._pendingPullIntos = new SimpleQueue();\n  }\n  function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n    let done = false;\n    if (stream._state === 'closed') {\n      done = true;\n    }\n    const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n    if (pullIntoDescriptor.readerType === 'default') {\n      ReadableStreamFulfillReadRequest(stream, filledView, done);\n    } else {\n      ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n    }\n  }\n  function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n    const bytesFilled = pullIntoDescriptor.bytesFilled;\n    const elementSize = pullIntoDescriptor.elementSize;\n    return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n  }\n  function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n    controller._queue.push({\n      buffer,\n      byteOffset,\n      byteLength\n    });\n    controller._queueTotalSize += byteLength;\n  }\n  function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n    const elementSize = pullIntoDescriptor.elementSize;\n    const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n    const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n    const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n    const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n    let totalBytesToCopyRemaining = maxBytesToCopy;\n    let ready = false;\n    if (maxAlignedBytes > currentAlignedBytes) {\n      totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n      ready = true;\n    }\n    const queue = controller._queue;\n    while (totalBytesToCopyRemaining > 0) {\n      const headOfQueue = queue.peek();\n      const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n      const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n      if (headOfQueue.byteLength === bytesToCopy) {\n        queue.shift();\n      } else {\n        headOfQueue.byteOffset += bytesToCopy;\n        headOfQueue.byteLength -= bytesToCopy;\n      }\n      controller._queueTotalSize -= bytesToCopy;\n      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n      totalBytesToCopyRemaining -= bytesToCopy;\n    }\n    return ready;\n  }\n  function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n    pullIntoDescriptor.bytesFilled += size;\n  }\n  function ReadableByteStreamControllerHandleQueueDrain(controller) {\n    if (controller._queueTotalSize === 0 && controller._closeRequested) {\n      ReadableByteStreamControllerClearAlgorithms(controller);\n      ReadableStreamClose(controller._controlledReadableByteStream);\n    } else {\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n  }\n  function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n    if (controller._byobRequest === null) {\n      return;\n    }\n    controller._byobRequest._associatedReadableByteStreamController = undefined;\n    controller._byobRequest._view = null;\n    controller._byobRequest = null;\n  }\n  function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n    while (controller._pendingPullIntos.length > 0) {\n      if (controller._queueTotalSize === 0) {\n        return;\n      }\n      const pullIntoDescriptor = controller._pendingPullIntos.peek();\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n      }\n    }\n  }\n  function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n    const stream = controller._controlledReadableByteStream;\n    let elementSize = 1;\n    if (view.constructor !== DataView) {\n      elementSize = view.constructor.BYTES_PER_ELEMENT;\n    }\n    const ctor = view.constructor;\n    // try {\n    const buffer = TransferArrayBuffer(view.buffer);\n    // } catch (e) {\n    //   readIntoRequest._errorSteps(e);\n    //   return;\n    // }\n    const pullIntoDescriptor = {\n      buffer,\n      bufferByteLength: buffer.byteLength,\n      byteOffset: view.byteOffset,\n      byteLength: view.byteLength,\n      bytesFilled: 0,\n      elementSize,\n      viewConstructor: ctor,\n      readerType: 'byob'\n    };\n    if (controller._pendingPullIntos.length > 0) {\n      controller._pendingPullIntos.push(pullIntoDescriptor);\n      // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n      // - No change happens on desiredSize\n      // - The source has already been notified of that there's at least 1 pending read(view)\n      ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n      return;\n    }\n    if (stream._state === 'closed') {\n      const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n      readIntoRequest._closeSteps(emptyView);\n      return;\n    }\n    if (controller._queueTotalSize > 0) {\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        ReadableByteStreamControllerHandleQueueDrain(controller);\n        readIntoRequest._chunkSteps(filledView);\n        return;\n      }\n      if (controller._closeRequested) {\n        const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n        readIntoRequest._errorSteps(e);\n        return;\n      }\n    }\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n  function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n    const stream = controller._controlledReadableByteStream;\n    if (ReadableStreamHasBYOBReader(stream)) {\n      while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n        const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n      }\n    }\n  }\n  function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n    if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n      return;\n    }\n    ReadableByteStreamControllerShiftPendingPullInto(controller);\n    const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n    if (remainderSize > 0) {\n      const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n    }\n    pullIntoDescriptor.bytesFilled -= remainderSize;\n    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  }\n  function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    const state = controller._controlledReadableByteStream._state;\n    if (state === 'closed') {\n      ReadableByteStreamControllerRespondInClosedState(controller);\n    } else {\n      ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n    }\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n  function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n    const descriptor = controller._pendingPullIntos.shift();\n    return descriptor;\n  }\n  function ReadableByteStreamControllerShouldCallPull(controller) {\n    const stream = controller._controlledReadableByteStream;\n    if (stream._state !== 'readable') {\n      return false;\n    }\n    if (controller._closeRequested) {\n      return false;\n    }\n    if (!controller._started) {\n      return false;\n    }\n    if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n    if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      return true;\n    }\n    const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n    if (desiredSize > 0) {\n      return true;\n    }\n    return false;\n  }\n  function ReadableByteStreamControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n  }\n  // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n  function ReadableByteStreamControllerClose(controller) {\n    const stream = controller._controlledReadableByteStream;\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n    if (controller._queueTotalSize > 0) {\n      controller._closeRequested = true;\n      return;\n    }\n    if (controller._pendingPullIntos.length > 0) {\n      const firstPendingPullInto = controller._pendingPullIntos.peek();\n      if (firstPendingPullInto.bytesFilled > 0) {\n        const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n        throw e;\n      }\n    }\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n  function ReadableByteStreamControllerEnqueue(controller, chunk) {\n    const stream = controller._controlledReadableByteStream;\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n    const buffer = chunk.buffer;\n    const byteOffset = chunk.byteOffset;\n    const byteLength = chunk.byteLength;\n    const transferredBuffer = TransferArrayBuffer(buffer);\n    if (controller._pendingPullIntos.length > 0) {\n      const firstPendingPullInto = controller._pendingPullIntos.peek();\n      if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n      firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n    }\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    if (ReadableStreamHasDefaultReader(stream)) {\n      if (ReadableStreamGetNumReadRequests(stream) === 0) {\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      } else {\n        if (controller._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerShiftPendingPullInto(controller);\n        }\n        const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n      }\n    } else if (ReadableStreamHasBYOBReader(stream)) {\n      // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    } else {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    }\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n  function ReadableByteStreamControllerError(controller, e) {\n    const stream = controller._controlledReadableByteStream;\n    if (stream._state !== 'readable') {\n      return;\n    }\n    ReadableByteStreamControllerClearPendingPullIntos(controller);\n    ResetQueue(controller);\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n  function ReadableByteStreamControllerGetBYOBRequest(controller) {\n    if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n      const firstDescriptor = controller._pendingPullIntos.peek();\n      const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n      const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n      controller._byobRequest = byobRequest;\n    }\n    return controller._byobRequest;\n  }\n  function ReadableByteStreamControllerGetDesiredSize(controller) {\n    const state = controller._controlledReadableByteStream._state;\n    if (state === 'errored') {\n      return null;\n    }\n    if (state === 'closed') {\n      return 0;\n    }\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n  function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const state = controller._controlledReadableByteStream._state;\n    if (state === 'closed') {\n      if (bytesWritten !== 0) {\n        throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n      }\n    } else {\n      if (bytesWritten === 0) {\n        throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n      }\n      if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n        throw new RangeError('bytesWritten out of range');\n      }\n    }\n    firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n  }\n  function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const state = controller._controlledReadableByteStream._state;\n    if (state === 'closed') {\n      if (view.byteLength !== 0) {\n        throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n      }\n    } else {\n      if (view.byteLength === 0) {\n        throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n      }\n    }\n    if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n      throw new RangeError('The region specified by view does not match byobRequest');\n    }\n    if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n      throw new RangeError('The buffer of view has different capacity than byobRequest');\n    }\n    if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n      throw new RangeError('The region specified by view is larger than byobRequest');\n    }\n    const viewByteLength = view.byteLength;\n    firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n  }\n  function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n    controller._controlledReadableByteStream = stream;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._byobRequest = null;\n    // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n    controller._queue = controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._closeRequested = false;\n    controller._started = false;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    controller._autoAllocateChunkSize = autoAllocateChunkSize;\n    controller._pendingPullIntos = new SimpleQueue();\n    stream._readableStreamController = controller;\n    const startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), () => {\n      controller._started = true;\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }, r => {\n      ReadableByteStreamControllerError(controller, r);\n    });\n  }\n  function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n    const controller = Object.create(ReadableByteStreamController.prototype);\n    let startAlgorithm = () => undefined;\n    let pullAlgorithm = () => promiseResolvedWith(undefined);\n    let cancelAlgorithm = () => promiseResolvedWith(undefined);\n    if (underlyingByteSource.start !== undefined) {\n      startAlgorithm = () => underlyingByteSource.start(controller);\n    }\n    if (underlyingByteSource.pull !== undefined) {\n      pullAlgorithm = () => underlyingByteSource.pull(controller);\n    }\n    if (underlyingByteSource.cancel !== undefined) {\n      cancelAlgorithm = reason => underlyingByteSource.cancel(reason);\n    }\n    const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n    if (autoAllocateChunkSize === 0) {\n      throw new TypeError('autoAllocateChunkSize must be greater than 0');\n    }\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n  }\n  function SetUpReadableStreamBYOBRequest(request, controller, view) {\n    request._associatedReadableByteStreamController = controller;\n    request._view = view;\n  }\n  // Helper functions for the ReadableStreamBYOBRequest.\n  function byobRequestBrandCheckException(name) {\n    return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n  }\n  // Helper functions for the ReadableByteStreamController.\n  function byteStreamControllerBrandCheckException(name) {\n    return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n  }\n\n  // Abstract operations for the ReadableStream.\n  function AcquireReadableStreamBYOBReader(stream) {\n    return new ReadableStreamBYOBReader(stream);\n  }\n  // ReadableStream API exposed for controllers.\n  function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  }\n  function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n    const reader = stream._reader;\n    const readIntoRequest = reader._readIntoRequests.shift();\n    if (done) {\n      readIntoRequest._closeSteps(chunk);\n    } else {\n      readIntoRequest._chunkSteps(chunk);\n    }\n  }\n  function ReadableStreamGetNumReadIntoRequests(stream) {\n    return stream._reader._readIntoRequests.length;\n  }\n  function ReadableStreamHasBYOBReader(stream) {\n    const reader = stream._reader;\n    if (reader === undefined) {\n      return false;\n    }\n    if (!IsReadableStreamBYOBReader(reader)) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * A BYOB reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n  class ReadableStreamBYOBReader {\n    constructor(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n      assertReadableStream(stream, 'First parameter');\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n      if (!IsReadableByteStreamController(stream._readableStreamController)) {\n        throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' + 'source');\n      }\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readIntoRequests = new SimpleQueue();\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n     * the reader's lock is released before the stream finishes closing.\n     */\n    get closed() {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n      }\n      return this._closedPromise;\n    }\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n    cancel(reason = undefined) {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n      }\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n      return ReadableStreamReaderGenericCancel(this, reason);\n    }\n    /**\n     * Attempts to reads bytes into view, and returns a promise resolved with the result.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n    read(view) {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('read'));\n      }\n      if (!ArrayBuffer.isView(view)) {\n        return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n      }\n      if (view.byteLength === 0) {\n        return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n      }\n      if (view.buffer.byteLength === 0) {\n        return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n      }\n      if (IsDetachedBuffer(view.buffer)) ;\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n      let resolvePromise;\n      let rejectPromise;\n      const promise = newPromise((resolve, reject) => {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      const readIntoRequest = {\n        _chunkSteps: chunk => resolvePromise({\n          value: chunk,\n          done: false\n        }),\n        _closeSteps: chunk => resolvePromise({\n          value: chunk,\n          done: true\n        }),\n        _errorSteps: e => rejectPromise(e)\n      };\n      ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n      return promise;\n    }\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n    releaseLock() {\n      if (!IsReadableStreamBYOBReader(this)) {\n        throw byobReaderBrandCheckException('releaseLock');\n      }\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n      if (this._readIntoRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n      ReadableStreamReaderGenericRelease(this);\n    }\n  }\n  Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBReader',\n      configurable: true\n    });\n  }\n  // Abstract operations for the readers.\n  function IsReadableStreamBYOBReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n      return false;\n    }\n    return x instanceof ReadableStreamBYOBReader;\n  }\n  function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n    const stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n    if (stream._state === 'errored') {\n      readIntoRequest._errorSteps(stream._storedError);\n    } else {\n      ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n    }\n  }\n  // Helper functions for the ReadableStreamBYOBReader.\n  function byobReaderBrandCheckException(name) {\n    return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n  }\n  function ExtractHighWaterMark(strategy, defaultHWM) {\n    const {\n      highWaterMark\n    } = strategy;\n    if (highWaterMark === undefined) {\n      return defaultHWM;\n    }\n    if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n      throw new RangeError('Invalid highWaterMark');\n    }\n    return highWaterMark;\n  }\n  function ExtractSizeAlgorithm(strategy) {\n    const {\n      size\n    } = strategy;\n    if (!size) {\n      return () => 1;\n    }\n    return size;\n  }\n  function convertQueuingStrategy(init, context) {\n    assertDictionary(init, context);\n    const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    const size = init === null || init === void 0 ? void 0 : init.size;\n    return {\n      highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n      size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n    };\n  }\n  function convertQueuingStrategySize(fn, context) {\n    assertFunction(fn, context);\n    return chunk => convertUnrestrictedDouble(fn(chunk));\n  }\n  function convertUnderlyingSink(original, context) {\n    assertDictionary(original, context);\n    const abort = original === null || original === void 0 ? void 0 : original.abort;\n    const close = original === null || original === void 0 ? void 0 : original.close;\n    const start = original === null || original === void 0 ? void 0 : original.start;\n    const type = original === null || original === void 0 ? void 0 : original.type;\n    const write = original === null || original === void 0 ? void 0 : original.write;\n    return {\n      abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n      close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n      start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n      write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n      type\n    };\n  }\n  function convertUnderlyingSinkAbortCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return reason => promiseCall(fn, original, [reason]);\n  }\n  function convertUnderlyingSinkCloseCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return () => promiseCall(fn, original, []);\n  }\n  function convertUnderlyingSinkStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => reflectCall(fn, original, [controller]);\n  }\n  function convertUnderlyingSinkWriteCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n  }\n  function assertWritableStream(x, context) {\n    if (!IsWritableStream(x)) {\n      throw new TypeError(`${context} is not a WritableStream.`);\n    }\n  }\n  function isAbortSignal(value) {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n    try {\n      return typeof value.aborted === 'boolean';\n    } catch (_a) {\n      // AbortSignal.prototype.aborted throws if its brand check fails\n      return false;\n    }\n  }\n  const supportsAbortController = typeof AbortController === 'function';\n  /**\n   * Construct a new AbortController, if supported by the platform.\n   *\n   * @internal\n   */\n  function createAbortController() {\n    if (supportsAbortController) {\n      return new AbortController();\n    }\n    return undefined;\n  }\n\n  /**\n   * A writable stream represents a destination for data, into which you can write.\n   *\n   * @public\n   */\n  class WritableStream {\n    constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\n      if (rawUnderlyingSink === undefined) {\n        rawUnderlyingSink = null;\n      } else {\n        assertObject(rawUnderlyingSink, 'First parameter');\n      }\n      const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n      InitializeWritableStream(this);\n      const type = underlyingSink.type;\n      if (type !== undefined) {\n        throw new RangeError('Invalid type is specified');\n      }\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n    }\n    /**\n     * Returns whether or not the writable stream is locked to a writer.\n     */\n    get locked() {\n      if (!IsWritableStream(this)) {\n        throw streamBrandCheckException$2('locked');\n      }\n      return IsWritableStreamLocked(this);\n    }\n    /**\n     * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n     * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n     * mechanism of the underlying sink.\n     *\n     * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n     * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n     * the stream) if the stream is currently locked.\n     */\n    abort(reason = undefined) {\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('abort'));\n      }\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n      }\n      return WritableStreamAbort(this, reason);\n    }\n    /**\n     * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n     * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n     *\n     * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n     * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n     * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n     */\n    close() {\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('close'));\n      }\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n      }\n      if (WritableStreamCloseQueuedOrInFlight(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n      return WritableStreamClose(this);\n    }\n    /**\n     * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n     * is locked, no other writer can be acquired until this one is released.\n     *\n     * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n     * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n     * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n     */\n    getWriter() {\n      if (!IsWritableStream(this)) {\n        throw streamBrandCheckException$2('getWriter');\n      }\n      return AcquireWritableStreamDefaultWriter(this);\n    }\n  }\n  Object.defineProperties(WritableStream.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    getWriter: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStream',\n      configurable: true\n    });\n  }\n  // Abstract operations for the WritableStream.\n  function AcquireWritableStreamDefaultWriter(stream) {\n    return new WritableStreamDefaultWriter(stream);\n  }\n  // Throws if and only if startAlgorithm throws.\n  function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n    const stream = Object.create(WritableStream.prototype);\n    InitializeWritableStream(stream);\n    const controller = Object.create(WritableStreamDefaultController.prototype);\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  }\n  function InitializeWritableStream(stream) {\n    stream._state = 'writable';\n    // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n    // 'erroring' or 'errored'. May be set to an undefined value.\n    stream._storedError = undefined;\n    stream._writer = undefined;\n    // Initialize to undefined first because the constructor of the controller checks this\n    // variable to validate the caller.\n    stream._writableStreamController = undefined;\n    // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n    // producer without waiting for the queued writes to finish.\n    stream._writeRequests = new SimpleQueue();\n    // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n    // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n    stream._inFlightWriteRequest = undefined;\n    // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n    // has been detached.\n    stream._closeRequest = undefined;\n    // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n    // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n    stream._inFlightCloseRequest = undefined;\n    // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n    stream._pendingAbortRequest = undefined;\n    // The backpressure signal set by the controller.\n    stream._backpressure = false;\n  }\n  function IsWritableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n      return false;\n    }\n    return x instanceof WritableStream;\n  }\n  function IsWritableStreamLocked(stream) {\n    if (stream._writer === undefined) {\n      return false;\n    }\n    return true;\n  }\n  function WritableStreamAbort(stream, reason) {\n    var _a;\n    if (stream._state === 'closed' || stream._state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n    stream._writableStreamController._abortReason = reason;\n    (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n    // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n    // but it doesn't know that signaling abort runs author code that might have changed the state.\n    // Widen the type again by casting to WritableStreamState.\n    const state = stream._state;\n    if (state === 'closed' || state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n    if (stream._pendingAbortRequest !== undefined) {\n      return stream._pendingAbortRequest._promise;\n    }\n    let wasAlreadyErroring = false;\n    if (state === 'erroring') {\n      wasAlreadyErroring = true;\n      // reason will not be used, so don't keep a reference to it.\n      reason = undefined;\n    }\n    const promise = newPromise((resolve, reject) => {\n      stream._pendingAbortRequest = {\n        _promise: undefined,\n        _resolve: resolve,\n        _reject: reject,\n        _reason: reason,\n        _wasAlreadyErroring: wasAlreadyErroring\n      };\n    });\n    stream._pendingAbortRequest._promise = promise;\n    if (!wasAlreadyErroring) {\n      WritableStreamStartErroring(stream, reason);\n    }\n    return promise;\n  }\n  function WritableStreamClose(stream) {\n    const state = stream._state;\n    if (state === 'closed' || state === 'errored') {\n      return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n    }\n    const promise = newPromise((resolve, reject) => {\n      const closeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n      stream._closeRequest = closeRequest;\n    });\n    const writer = stream._writer;\n    if (writer !== undefined && stream._backpressure && state === 'writable') {\n      defaultWriterReadyPromiseResolve(writer);\n    }\n    WritableStreamDefaultControllerClose(stream._writableStreamController);\n    return promise;\n  }\n  // WritableStream API exposed for controllers.\n  function WritableStreamAddWriteRequest(stream) {\n    const promise = newPromise((resolve, reject) => {\n      const writeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n      stream._writeRequests.push(writeRequest);\n    });\n    return promise;\n  }\n  function WritableStreamDealWithRejection(stream, error) {\n    const state = stream._state;\n    if (state === 'writable') {\n      WritableStreamStartErroring(stream, error);\n      return;\n    }\n    WritableStreamFinishErroring(stream);\n  }\n  function WritableStreamStartErroring(stream, reason) {\n    const controller = stream._writableStreamController;\n    stream._state = 'erroring';\n    stream._storedError = reason;\n    const writer = stream._writer;\n    if (writer !== undefined) {\n      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n    }\n    if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n      WritableStreamFinishErroring(stream);\n    }\n  }\n  function WritableStreamFinishErroring(stream) {\n    stream._state = 'errored';\n    stream._writableStreamController[ErrorSteps]();\n    const storedError = stream._storedError;\n    stream._writeRequests.forEach(writeRequest => {\n      writeRequest._reject(storedError);\n    });\n    stream._writeRequests = new SimpleQueue();\n    if (stream._pendingAbortRequest === undefined) {\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n    const abortRequest = stream._pendingAbortRequest;\n    stream._pendingAbortRequest = undefined;\n    if (abortRequest._wasAlreadyErroring) {\n      abortRequest._reject(storedError);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n    const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n    uponPromise(promise, () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    }, reason => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n  }\n  function WritableStreamFinishInFlightWrite(stream) {\n    stream._inFlightWriteRequest._resolve(undefined);\n    stream._inFlightWriteRequest = undefined;\n  }\n  function WritableStreamFinishInFlightWriteWithError(stream, error) {\n    stream._inFlightWriteRequest._reject(error);\n    stream._inFlightWriteRequest = undefined;\n    WritableStreamDealWithRejection(stream, error);\n  }\n  function WritableStreamFinishInFlightClose(stream) {\n    stream._inFlightCloseRequest._resolve(undefined);\n    stream._inFlightCloseRequest = undefined;\n    const state = stream._state;\n    if (state === 'erroring') {\n      // The error was too late to do anything, so it is ignored.\n      stream._storedError = undefined;\n      if (stream._pendingAbortRequest !== undefined) {\n        stream._pendingAbortRequest._resolve();\n        stream._pendingAbortRequest = undefined;\n      }\n    }\n    stream._state = 'closed';\n    const writer = stream._writer;\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseResolve(writer);\n    }\n  }\n  function WritableStreamFinishInFlightCloseWithError(stream, error) {\n    stream._inFlightCloseRequest._reject(error);\n    stream._inFlightCloseRequest = undefined;\n    // Never execute sink abort() after sink close().\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._reject(error);\n      stream._pendingAbortRequest = undefined;\n    }\n    WritableStreamDealWithRejection(stream, error);\n  }\n  // TODO(ricea): Fix alphabetical order.\n  function WritableStreamCloseQueuedOrInFlight(stream) {\n    if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n    return true;\n  }\n  function WritableStreamHasOperationMarkedInFlight(stream) {\n    if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n    return true;\n  }\n  function WritableStreamMarkCloseRequestInFlight(stream) {\n    stream._inFlightCloseRequest = stream._closeRequest;\n    stream._closeRequest = undefined;\n  }\n  function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n    stream._inFlightWriteRequest = stream._writeRequests.shift();\n  }\n  function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n    if (stream._closeRequest !== undefined) {\n      stream._closeRequest._reject(stream._storedError);\n      stream._closeRequest = undefined;\n    }\n    const writer = stream._writer;\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseReject(writer, stream._storedError);\n    }\n  }\n  function WritableStreamUpdateBackpressure(stream, backpressure) {\n    const writer = stream._writer;\n    if (writer !== undefined && backpressure !== stream._backpressure) {\n      if (backpressure) {\n        defaultWriterReadyPromiseReset(writer);\n      } else {\n        defaultWriterReadyPromiseResolve(writer);\n      }\n    }\n    stream._backpressure = backpressure;\n  }\n  /**\n   * A default writer vended by a {@link WritableStream}.\n   *\n   * @public\n   */\n  class WritableStreamDefaultWriter {\n    constructor(stream) {\n      assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n      assertWritableStream(stream, 'First parameter');\n      if (IsWritableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n      }\n      this._ownerWritableStream = stream;\n      stream._writer = this;\n      const state = stream._state;\n      if (state === 'writable') {\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n          defaultWriterReadyPromiseInitialize(this);\n        } else {\n          defaultWriterReadyPromiseInitializeAsResolved(this);\n        }\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'erroring') {\n        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'closed') {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n        defaultWriterClosedPromiseInitializeAsResolved(this);\n      } else {\n        const storedError = stream._storedError;\n        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      }\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n     * the writer’s lock is released before the stream finishes closing.\n     */\n    get closed() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n      }\n      return this._closedPromise;\n    }\n    /**\n     * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n     * A producer can use this information to determine the right amount of data to write.\n     *\n     * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n     * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n     * the writer’s lock is released.\n     */\n    get desiredSize() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        throw defaultWriterBrandCheckException('desiredSize');\n      }\n      if (this._ownerWritableStream === undefined) {\n        throw defaultWriterLockException('desiredSize');\n      }\n      return WritableStreamDefaultWriterGetDesiredSize(this);\n    }\n    /**\n     * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n     * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n     * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n     *\n     * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n     * rejected.\n     */\n    get ready() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n      }\n      return this._readyPromise;\n    }\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n     */\n    abort(reason = undefined) {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n      }\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('abort'));\n      }\n      return WritableStreamDefaultWriterAbort(this, reason);\n    }\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n     */\n    close() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n      }\n      const stream = this._ownerWritableStream;\n      if (stream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('close'));\n      }\n      if (WritableStreamCloseQueuedOrInFlight(stream)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n      return WritableStreamDefaultWriterClose(this);\n    }\n    /**\n     * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n     * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n     * now on; otherwise, the writer will appear closed.\n     *\n     * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n     * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n     * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n     * other producers from writing in an interleaved manner.\n     */\n    releaseLock() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        throw defaultWriterBrandCheckException('releaseLock');\n      }\n      const stream = this._ownerWritableStream;\n      if (stream === undefined) {\n        return;\n      }\n      WritableStreamDefaultWriterRelease(this);\n    }\n    write(chunk = undefined) {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n      }\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('write to'));\n      }\n      return WritableStreamDefaultWriterWrite(this, chunk);\n    }\n  }\n  Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    write: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    },\n    ready: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultWriter',\n      configurable: true\n    });\n  }\n  // Abstract operations for the WritableStreamDefaultWriter.\n  function IsWritableStreamDefaultWriter(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n      return false;\n    }\n    return x instanceof WritableStreamDefaultWriter;\n  }\n  // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n  function WritableStreamDefaultWriterAbort(writer, reason) {\n    const stream = writer._ownerWritableStream;\n    return WritableStreamAbort(stream, reason);\n  }\n  function WritableStreamDefaultWriterClose(writer) {\n    const stream = writer._ownerWritableStream;\n    return WritableStreamClose(stream);\n  }\n  function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n    const stream = writer._ownerWritableStream;\n    const state = stream._state;\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    return WritableStreamDefaultWriterClose(writer);\n  }\n  function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n    if (writer._closedPromiseState === 'pending') {\n      defaultWriterClosedPromiseReject(writer, error);\n    } else {\n      defaultWriterClosedPromiseResetToRejected(writer, error);\n    }\n  }\n  function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n    if (writer._readyPromiseState === 'pending') {\n      defaultWriterReadyPromiseReject(writer, error);\n    } else {\n      defaultWriterReadyPromiseResetToRejected(writer, error);\n    }\n  }\n  function WritableStreamDefaultWriterGetDesiredSize(writer) {\n    const stream = writer._ownerWritableStream;\n    const state = stream._state;\n    if (state === 'errored' || state === 'erroring') {\n      return null;\n    }\n    if (state === 'closed') {\n      return 0;\n    }\n    return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n  }\n  function WritableStreamDefaultWriterRelease(writer) {\n    const stream = writer._ownerWritableStream;\n    const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n    // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n    // rejected until afterwards. This means that simply testing state will not work.\n    WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n    stream._writer = undefined;\n    writer._ownerWritableStream = undefined;\n  }\n  function WritableStreamDefaultWriterWrite(writer, chunk) {\n    const stream = writer._ownerWritableStream;\n    const controller = stream._writableStreamController;\n    const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n    if (stream !== writer._ownerWritableStream) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n    const state = stream._state;\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n    }\n    if (state === 'erroring') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    const promise = WritableStreamAddWriteRequest(stream);\n    WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n    return promise;\n  }\n  const closeSentinel = {};\n  /**\n   * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n   *\n   * @public\n   */\n  class WritableStreamDefaultController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n     *\n     * @deprecated\n     *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n     *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n     */\n    get abortReason() {\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('abortReason');\n      }\n      return this._abortReason;\n    }\n    /**\n     * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n     */\n    get signal() {\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('signal');\n      }\n      if (this._abortController === undefined) {\n        // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n        // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n        // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n        throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n      }\n      return this._abortController.signal;\n    }\n    /**\n     * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n     *\n     * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n     * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n     * normal lifecycle of interactions with the underlying sink.\n     */\n    error(e = undefined) {\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('error');\n      }\n      const state = this._controlledWritableStream._state;\n      if (state !== 'writable') {\n        // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n        // just treat it as a no-op.\n        return;\n      }\n      WritableStreamDefaultControllerError(this, e);\n    }\n    /** @internal */\n    [AbortSteps](reason) {\n      const result = this._abortAlgorithm(reason);\n      WritableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    }\n    /** @internal */\n    [ErrorSteps]() {\n      ResetQueue(this);\n    }\n  }\n  Object.defineProperties(WritableStreamDefaultController.prototype, {\n    abortReason: {\n      enumerable: true\n    },\n    signal: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultController',\n      configurable: true\n    });\n  }\n  // Abstract operations implementing interface required by the WritableStream.\n  function IsWritableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n      return false;\n    }\n    return x instanceof WritableStreamDefaultController;\n  }\n  function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledWritableStream = stream;\n    stream._writableStreamController = controller;\n    // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._abortReason = undefined;\n    controller._abortController = createAbortController();\n    controller._started = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._writeAlgorithm = writeAlgorithm;\n    controller._closeAlgorithm = closeAlgorithm;\n    controller._abortAlgorithm = abortAlgorithm;\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n    const startResult = startAlgorithm();\n    const startPromise = promiseResolvedWith(startResult);\n    uponPromise(startPromise, () => {\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, r => {\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    });\n  }\n  function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n    const controller = Object.create(WritableStreamDefaultController.prototype);\n    let startAlgorithm = () => undefined;\n    let writeAlgorithm = () => promiseResolvedWith(undefined);\n    let closeAlgorithm = () => promiseResolvedWith(undefined);\n    let abortAlgorithm = () => promiseResolvedWith(undefined);\n    if (underlyingSink.start !== undefined) {\n      startAlgorithm = () => underlyingSink.start(controller);\n    }\n    if (underlyingSink.write !== undefined) {\n      writeAlgorithm = chunk => underlyingSink.write(chunk, controller);\n    }\n    if (underlyingSink.close !== undefined) {\n      closeAlgorithm = () => underlyingSink.close();\n    }\n    if (underlyingSink.abort !== undefined) {\n      abortAlgorithm = reason => underlyingSink.abort(reason);\n    }\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n  }\n  // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n  function WritableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._writeAlgorithm = undefined;\n    controller._closeAlgorithm = undefined;\n    controller._abortAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  }\n  function WritableStreamDefaultControllerClose(controller) {\n    EnqueueValueWithSize(controller, closeSentinel, 0);\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }\n  function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n    try {\n      return controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n      return 1;\n    }\n  }\n  function WritableStreamDefaultControllerGetDesiredSize(controller) {\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n  function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n      return;\n    }\n    const stream = controller._controlledWritableStream;\n    if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n      const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n      WritableStreamUpdateBackpressure(stream, backpressure);\n    }\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }\n  // Abstract operations for the WritableStreamDefaultController.\n  function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n    const stream = controller._controlledWritableStream;\n    if (!controller._started) {\n      return;\n    }\n    if (stream._inFlightWriteRequest !== undefined) {\n      return;\n    }\n    const state = stream._state;\n    if (state === 'erroring') {\n      WritableStreamFinishErroring(stream);\n      return;\n    }\n    if (controller._queue.length === 0) {\n      return;\n    }\n    const value = PeekQueueValue(controller);\n    if (value === closeSentinel) {\n      WritableStreamDefaultControllerProcessClose(controller);\n    } else {\n      WritableStreamDefaultControllerProcessWrite(controller, value);\n    }\n  }\n  function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n    if (controller._controlledWritableStream._state === 'writable') {\n      WritableStreamDefaultControllerError(controller, error);\n    }\n  }\n  function WritableStreamDefaultControllerProcessClose(controller) {\n    const stream = controller._controlledWritableStream;\n    WritableStreamMarkCloseRequestInFlight(stream);\n    DequeueValue(controller);\n    const sinkClosePromise = controller._closeAlgorithm();\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    uponPromise(sinkClosePromise, () => {\n      WritableStreamFinishInFlightClose(stream);\n    }, reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    });\n  }\n  function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n    const stream = controller._controlledWritableStream;\n    WritableStreamMarkFirstWriteRequestInFlight(stream);\n    const sinkWritePromise = controller._writeAlgorithm(chunk);\n    uponPromise(sinkWritePromise, () => {\n      WritableStreamFinishInFlightWrite(stream);\n      const state = stream._state;\n      DequeueValue(controller);\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    });\n  }\n  function WritableStreamDefaultControllerGetBackpressure(controller) {\n    const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n    return desiredSize <= 0;\n  }\n  // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n  function WritableStreamDefaultControllerError(controller, error) {\n    const stream = controller._controlledWritableStream;\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    WritableStreamStartErroring(stream, error);\n  }\n  // Helper functions for the WritableStream.\n  function streamBrandCheckException$2(name) {\n    return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n  }\n  // Helper functions for the WritableStreamDefaultController.\n  function defaultControllerBrandCheckException$2(name) {\n    return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n  }\n  // Helper functions for the WritableStreamDefaultWriter.\n  function defaultWriterBrandCheckException(name) {\n    return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n  }\n  function defaultWriterLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released writer');\n  }\n  function defaultWriterClosedPromiseInitialize(writer) {\n    writer._closedPromise = newPromise((resolve, reject) => {\n      writer._closedPromise_resolve = resolve;\n      writer._closedPromise_reject = reject;\n      writer._closedPromiseState = 'pending';\n    });\n  }\n  function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseReject(writer, reason);\n  }\n  function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseResolve(writer);\n  }\n  function defaultWriterClosedPromiseReject(writer, reason) {\n    if (writer._closedPromise_reject === undefined) {\n      return;\n    }\n    setPromiseIsHandledToTrue(writer._closedPromise);\n    writer._closedPromise_reject(reason);\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'rejected';\n  }\n  function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n    defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n  }\n  function defaultWriterClosedPromiseResolve(writer) {\n    if (writer._closedPromise_resolve === undefined) {\n      return;\n    }\n    writer._closedPromise_resolve(undefined);\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'resolved';\n  }\n  function defaultWriterReadyPromiseInitialize(writer) {\n    writer._readyPromise = newPromise((resolve, reject) => {\n      writer._readyPromise_resolve = resolve;\n      writer._readyPromise_reject = reject;\n    });\n    writer._readyPromiseState = 'pending';\n  }\n  function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseReject(writer, reason);\n  }\n  function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseResolve(writer);\n  }\n  function defaultWriterReadyPromiseReject(writer, reason) {\n    if (writer._readyPromise_reject === undefined) {\n      return;\n    }\n    setPromiseIsHandledToTrue(writer._readyPromise);\n    writer._readyPromise_reject(reason);\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'rejected';\n  }\n  function defaultWriterReadyPromiseReset(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n  }\n  function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n    defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n  }\n  function defaultWriterReadyPromiseResolve(writer) {\n    if (writer._readyPromise_resolve === undefined) {\n      return;\n    }\n    writer._readyPromise_resolve(undefined);\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'fulfilled';\n  }\n\n  /// <reference lib=\"dom\" />\n  const NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;\n\n  /// <reference types=\"node\" />\n  function isDOMExceptionConstructor(ctor) {\n    if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n      return false;\n    }\n    try {\n      new ctor();\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n  function createDOMExceptionPolyfill() {\n    // eslint-disable-next-line no-shadow\n    const ctor = function DOMException(message, name) {\n      this.message = message || '';\n      this.name = name || 'Error';\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n    };\n    ctor.prototype = Object.create(Error.prototype);\n    Object.defineProperty(ctor.prototype, 'constructor', {\n      value: ctor,\n      writable: true,\n      configurable: true\n    });\n    return ctor;\n  }\n  // eslint-disable-next-line no-redeclare\n  const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n  function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n    const reader = AcquireReadableStreamDefaultReader(source);\n    const writer = AcquireWritableStreamDefaultWriter(dest);\n    source._disturbed = true;\n    let shuttingDown = false;\n    // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n    let currentWrite = promiseResolvedWith(undefined);\n    return newPromise((resolve, reject) => {\n      let abortAlgorithm;\n      if (signal !== undefined) {\n        abortAlgorithm = () => {\n          const error = new DOMException$1('Aborted', 'AbortError');\n          const actions = [];\n          if (!preventAbort) {\n            actions.push(() => {\n              if (dest._state === 'writable') {\n                return WritableStreamAbort(dest, error);\n              }\n              return promiseResolvedWith(undefined);\n            });\n          }\n          if (!preventCancel) {\n            actions.push(() => {\n              if (source._state === 'readable') {\n                return ReadableStreamCancel(source, error);\n              }\n              return promiseResolvedWith(undefined);\n            });\n          }\n          shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n        };\n        if (signal.aborted) {\n          abortAlgorithm();\n          return;\n        }\n        signal.addEventListener('abort', abortAlgorithm);\n      }\n      // Using reader and writer, read all chunks from this and write them to dest\n      // - Backpressure must be enforced\n      // - Shutdown must stop all activity\n      function pipeLoop() {\n        return newPromise((resolveLoop, rejectLoop) => {\n          function next(done) {\n            if (done) {\n              resolveLoop();\n            } else {\n              // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n              // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n              PerformPromiseThen(pipeStep(), next, rejectLoop);\n            }\n          }\n          next(false);\n        });\n      }\n      function pipeStep() {\n        if (shuttingDown) {\n          return promiseResolvedWith(true);\n        }\n        return PerformPromiseThen(writer._readyPromise, () => {\n          return newPromise((resolveRead, rejectRead) => {\n            ReadableStreamDefaultReaderRead(reader, {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            });\n          });\n        });\n      }\n      // Errors must be propagated forward\n      isOrBecomesErrored(source, reader._closedPromise, storedError => {\n        if (!preventAbort) {\n          shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n      // Errors must be propagated backward\n      isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n        if (!preventCancel) {\n          shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n      // Closing must be propagated forward\n      isOrBecomesClosed(source, reader._closedPromise, () => {\n        if (!preventClose) {\n          shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n        } else {\n          shutdown();\n        }\n      });\n      // Closing must be propagated backward\n      if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n        const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n        if (!preventCancel) {\n          shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n        } else {\n          shutdown(true, destClosed);\n        }\n      }\n      setPromiseIsHandledToTrue(pipeLoop());\n      function waitForWritesToFinish() {\n        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n        // for that too.\n        const oldCurrentWrite = currentWrite;\n        return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n      }\n      function isOrBecomesErrored(stream, promise, action) {\n        if (stream._state === 'errored') {\n          action(stream._storedError);\n        } else {\n          uponRejection(promise, action);\n        }\n      }\n      function isOrBecomesClosed(stream, promise, action) {\n        if (stream._state === 'closed') {\n          action();\n        } else {\n          uponFulfillment(promise, action);\n        }\n      }\n      function shutdownWithAction(action, originalIsError, originalError) {\n        if (shuttingDown) {\n          return;\n        }\n        shuttingDown = true;\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), doTheRest);\n        } else {\n          doTheRest();\n        }\n        function doTheRest() {\n          uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));\n        }\n      }\n      function shutdown(isError, error) {\n        if (shuttingDown) {\n          return;\n        }\n        shuttingDown = true;\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n        } else {\n          finalize(isError, error);\n        }\n      }\n      function finalize(isError, error) {\n        WritableStreamDefaultWriterRelease(writer);\n        ReadableStreamReaderGenericRelease(reader);\n        if (signal !== undefined) {\n          signal.removeEventListener('abort', abortAlgorithm);\n        }\n        if (isError) {\n          reject(error);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  }\n\n  /**\n   * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n   *\n   * @public\n   */\n  class ReadableStreamDefaultController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n     * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n     */\n    get desiredSize() {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('desiredSize');\n      }\n      return ReadableStreamDefaultControllerGetDesiredSize(this);\n    }\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n    close() {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('close');\n      }\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits close');\n      }\n      ReadableStreamDefaultControllerClose(this);\n    }\n    enqueue(chunk = undefined) {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('enqueue');\n      }\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits enqueue');\n      }\n      return ReadableStreamDefaultControllerEnqueue(this, chunk);\n    }\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n    error(e = undefined) {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('error');\n      }\n      ReadableStreamDefaultControllerError(this, e);\n    }\n    /** @internal */\n    [CancelSteps](reason) {\n      ResetQueue(this);\n      const result = this._cancelAlgorithm(reason);\n      ReadableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    }\n    /** @internal */\n    [PullSteps](readRequest) {\n      const stream = this._controlledReadableStream;\n      if (this._queue.length > 0) {\n        const chunk = DequeueValue(this);\n        if (this._closeRequested && this._queue.length === 0) {\n          ReadableStreamDefaultControllerClearAlgorithms(this);\n          ReadableStreamClose(stream);\n        } else {\n          ReadableStreamDefaultControllerCallPullIfNeeded(this);\n        }\n        readRequest._chunkSteps(chunk);\n      } else {\n        ReadableStreamAddReadRequest(stream, readRequest);\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n    }\n  }\n  Object.defineProperties(ReadableStreamDefaultController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultController',\n      configurable: true\n    });\n  }\n  // Abstract operations for the ReadableStreamDefaultController.\n  function IsReadableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n      return false;\n    }\n    return x instanceof ReadableStreamDefaultController;\n  }\n  function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n    const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n    if (!shouldPull) {\n      return;\n    }\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n    controller._pulling = true;\n    const pullPromise = controller._pullAlgorithm();\n    uponPromise(pullPromise, () => {\n      controller._pulling = false;\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    }, e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    });\n  }\n  function ReadableStreamDefaultControllerShouldCallPull(controller) {\n    const stream = controller._controlledReadableStream;\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return false;\n    }\n    if (!controller._started) {\n      return false;\n    }\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n    const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n    if (desiredSize > 0) {\n      return true;\n    }\n    return false;\n  }\n  function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  }\n  // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n  function ReadableStreamDefaultControllerClose(controller) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n    const stream = controller._controlledReadableStream;\n    controller._closeRequested = true;\n    if (controller._queue.length === 0) {\n      ReadableStreamDefaultControllerClearAlgorithms(controller);\n      ReadableStreamClose(stream);\n    }\n  }\n  function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n    const stream = controller._controlledReadableStream;\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      ReadableStreamFulfillReadRequest(stream, chunk, false);\n    } else {\n      let chunkSize;\n      try {\n        chunkSize = controller._strategySizeAlgorithm(chunk);\n      } catch (chunkSizeE) {\n        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n        throw chunkSizeE;\n      }\n      try {\n        EnqueueValueWithSize(controller, chunk, chunkSize);\n      } catch (enqueueE) {\n        ReadableStreamDefaultControllerError(controller, enqueueE);\n        throw enqueueE;\n      }\n    }\n    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n  }\n  function ReadableStreamDefaultControllerError(controller, e) {\n    const stream = controller._controlledReadableStream;\n    if (stream._state !== 'readable') {\n      return;\n    }\n    ResetQueue(controller);\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n  function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n    const state = controller._controlledReadableStream._state;\n    if (state === 'errored') {\n      return null;\n    }\n    if (state === 'closed') {\n      return 0;\n    }\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n  // This is used in the implementation of TransformStream.\n  function ReadableStreamDefaultControllerHasBackpressure(controller) {\n    if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n      return false;\n    }\n    return true;\n  }\n  function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n    const state = controller._controlledReadableStream._state;\n    if (!controller._closeRequested && state === 'readable') {\n      return true;\n    }\n    return false;\n  }\n  function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledReadableStream = stream;\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._started = false;\n    controller._closeRequested = false;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    stream._readableStreamController = controller;\n    const startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), () => {\n      controller._started = true;\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }, r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    });\n  }\n  function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n    const controller = Object.create(ReadableStreamDefaultController.prototype);\n    let startAlgorithm = () => undefined;\n    let pullAlgorithm = () => promiseResolvedWith(undefined);\n    let cancelAlgorithm = () => promiseResolvedWith(undefined);\n    if (underlyingSource.start !== undefined) {\n      startAlgorithm = () => underlyingSource.start(controller);\n    }\n    if (underlyingSource.pull !== undefined) {\n      pullAlgorithm = () => underlyingSource.pull(controller);\n    }\n    if (underlyingSource.cancel !== undefined) {\n      cancelAlgorithm = reason => underlyingSource.cancel(reason);\n    }\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n  }\n  // Helper functions for the ReadableStreamDefaultController.\n  function defaultControllerBrandCheckException$1(name) {\n    return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n  }\n  function ReadableStreamTee(stream, cloneForBranch2) {\n    if (IsReadableByteStreamController(stream._readableStreamController)) {\n      return ReadableByteStreamTee(stream);\n    }\n    return ReadableStreamDefaultTee(stream);\n  }\n  function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n    const reader = AcquireReadableStreamDefaultReader(stream);\n    let reading = false;\n    let readAgain = false;\n    let canceled1 = false;\n    let canceled2 = false;\n    let reason1;\n    let reason2;\n    let branch1;\n    let branch2;\n    let resolveCancelPromise;\n    const cancelPromise = newPromise(resolve => {\n      resolveCancelPromise = resolve;\n    });\n    function pullAlgorithm() {\n      if (reading) {\n        readAgain = true;\n        return promiseResolvedWith(undefined);\n      }\n      reading = true;\n      const readRequest = {\n        _chunkSteps: chunk => {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(() => {\n            readAgain = false;\n            const chunk1 = chunk;\n            const chunk2 = chunk;\n            // There is no way to access the cloning code right now in the reference implementation.\n            // If we add one then we'll need an implementation for serializable objects.\n            // if (!canceled2 && cloneForBranch2) {\n            //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n            // }\n            if (!canceled1) {\n              ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n            if (!canceled2) {\n              ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n            reading = false;\n            if (readAgain) {\n              pullAlgorithm();\n            }\n          });\n        },\n        _closeSteps: () => {\n          reading = false;\n          if (!canceled1) {\n            ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n          }\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: () => {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promiseResolvedWith(undefined);\n    }\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n      if (canceled2) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n      if (canceled1) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function startAlgorithm() {\n      // do nothing\n    }\n    branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n    branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n    uponRejection(reader._closedPromise, r => {\n      ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n      ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n    return [branch1, branch2];\n  }\n  function ReadableByteStreamTee(stream) {\n    let reader = AcquireReadableStreamDefaultReader(stream);\n    let reading = false;\n    let readAgainForBranch1 = false;\n    let readAgainForBranch2 = false;\n    let canceled1 = false;\n    let canceled2 = false;\n    let reason1;\n    let reason2;\n    let branch1;\n    let branch2;\n    let resolveCancelPromise;\n    const cancelPromise = newPromise(resolve => {\n      resolveCancelPromise = resolve;\n    });\n    function forwardReaderError(thisReader) {\n      uponRejection(thisReader._closedPromise, r => {\n        if (thisReader !== reader) {\n          return;\n        }\n        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      });\n    }\n    function pullWithDefaultReader() {\n      if (IsReadableStreamBYOBReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamDefaultReader(stream);\n        forwardReaderError(reader);\n      }\n      const readRequest = {\n        _chunkSteps: chunk => {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(() => {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            const chunk1 = chunk;\n            let chunk2 = chunk;\n            if (!canceled1 && !canceled2) {\n              try {\n                chunk2 = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n            }\n            if (!canceled1) {\n              ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n            if (!canceled2) {\n              ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n            reading = false;\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: () => {\n          reading = false;\n          if (!canceled1) {\n            ReadableByteStreamControllerClose(branch1._readableStreamController);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerClose(branch2._readableStreamController);\n          }\n          if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n          }\n          if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n          }\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: () => {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n    }\n    function pullWithBYOBReader(view, forBranch2) {\n      if (IsReadableStreamDefaultReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamBYOBReader(stream);\n        forwardReaderError(reader);\n      }\n      const byobBranch = forBranch2 ? branch2 : branch1;\n      const otherBranch = forBranch2 ? branch1 : branch2;\n      const readIntoRequest = {\n        _chunkSteps: chunk => {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(() => {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            const byobCanceled = forBranch2 ? canceled2 : canceled1;\n            const otherCanceled = forBranch2 ? canceled1 : canceled2;\n            if (!otherCanceled) {\n              let clonedChunk;\n              try {\n                clonedChunk = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n              if (!byobCanceled) {\n                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n              }\n              ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n            } else if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            reading = false;\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: chunk => {\n          reading = false;\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n          if (!byobCanceled) {\n            ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n          }\n          if (!otherCanceled) {\n            ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n          }\n          if (chunk !== undefined) {\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n              ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n            }\n          }\n          if (!byobCanceled || !otherCanceled) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: () => {\n          reading = false;\n        }\n      };\n      ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n    }\n    function pull1Algorithm() {\n      if (reading) {\n        readAgainForBranch1 = true;\n        return promiseResolvedWith(undefined);\n      }\n      reading = true;\n      const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, false);\n      }\n      return promiseResolvedWith(undefined);\n    }\n    function pull2Algorithm() {\n      if (reading) {\n        readAgainForBranch2 = true;\n        return promiseResolvedWith(undefined);\n      }\n      reading = true;\n      const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, true);\n      }\n      return promiseResolvedWith(undefined);\n    }\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n      if (canceled2) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n      if (canceled1) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function startAlgorithm() {\n      return;\n    }\n    branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n    branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n    forwardReaderError(reader);\n    return [branch1, branch2];\n  }\n  function convertUnderlyingDefaultOrByteSource(source, context) {\n    assertDictionary(source, context);\n    const original = source;\n    const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n    const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n    const pull = original === null || original === void 0 ? void 0 : original.pull;\n    const start = original === null || original === void 0 ? void 0 : original.start;\n    const type = original === null || original === void 0 ? void 0 : original.type;\n    return {\n      autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n      cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n      pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n      start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n      type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n    };\n  }\n  function convertUnderlyingSourceCancelCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return reason => promiseCall(fn, original, [reason]);\n  }\n  function convertUnderlyingSourcePullCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => promiseCall(fn, original, [controller]);\n  }\n  function convertUnderlyingSourceStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => reflectCall(fn, original, [controller]);\n  }\n  function convertReadableStreamType(type, context) {\n    type = `${type}`;\n    if (type !== 'bytes') {\n      throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n    }\n    return type;\n  }\n  function convertReaderOptions(options, context) {\n    assertDictionary(options, context);\n    const mode = options === null || options === void 0 ? void 0 : options.mode;\n    return {\n      mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n    };\n  }\n  function convertReadableStreamReaderMode(mode, context) {\n    mode = `${mode}`;\n    if (mode !== 'byob') {\n      throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n    }\n    return mode;\n  }\n  function convertIteratorOptions(options, context) {\n    assertDictionary(options, context);\n    const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    return {\n      preventCancel: Boolean(preventCancel)\n    };\n  }\n  function convertPipeOptions(options, context) {\n    assertDictionary(options, context);\n    const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n    const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal !== undefined) {\n      assertAbortSignal(signal, `${context} has member 'signal' that`);\n    }\n    return {\n      preventAbort: Boolean(preventAbort),\n      preventCancel: Boolean(preventCancel),\n      preventClose: Boolean(preventClose),\n      signal\n    };\n  }\n  function assertAbortSignal(signal, context) {\n    if (!isAbortSignal(signal)) {\n      throw new TypeError(`${context} is not an AbortSignal.`);\n    }\n  }\n  function convertReadableWritablePair(pair, context) {\n    assertDictionary(pair, context);\n    const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n    assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n    assertReadableStream(readable, `${context} has member 'readable' that`);\n    const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n    assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n    assertWritableStream(writable, `${context} has member 'writable' that`);\n    return {\n      readable,\n      writable\n    };\n  }\n\n  /**\n   * A readable stream represents a source of data, from which you can read.\n   *\n   * @public\n   */\n  class ReadableStream {\n    constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\n      if (rawUnderlyingSource === undefined) {\n        rawUnderlyingSource = null;\n      } else {\n        assertObject(rawUnderlyingSource, 'First parameter');\n      }\n      const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n      InitializeReadableStream(this);\n      if (underlyingSource.type === 'bytes') {\n        if (strategy.size !== undefined) {\n          throw new RangeError('The strategy for a byte stream cannot have a size function');\n        }\n        const highWaterMark = ExtractHighWaterMark(strategy, 0);\n        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n      } else {\n        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n        const highWaterMark = ExtractHighWaterMark(strategy, 1);\n        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n      }\n    }\n    /**\n     * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n     */\n    get locked() {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('locked');\n      }\n      return IsReadableStreamLocked(this);\n    }\n    /**\n     * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n     *\n     * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n     * method, which might or might not use it.\n     */\n    cancel(reason = undefined) {\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n      }\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n      }\n      return ReadableStreamCancel(this, reason);\n    }\n    getReader(rawOptions = undefined) {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('getReader');\n      }\n      const options = convertReaderOptions(rawOptions, 'First parameter');\n      if (options.mode === undefined) {\n        return AcquireReadableStreamDefaultReader(this);\n      }\n      return AcquireReadableStreamBYOBReader(this);\n    }\n    pipeThrough(rawTransform, rawOptions = {}) {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('pipeThrough');\n      }\n      assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n      const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n      const options = convertPipeOptions(rawOptions, 'Second parameter');\n      if (IsReadableStreamLocked(this)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n      }\n      if (IsWritableStreamLocked(transform.writable)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n      }\n      const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n      setPromiseIsHandledToTrue(promise);\n      return transform.readable;\n    }\n    pipeTo(destination, rawOptions = {}) {\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n      }\n      if (destination === undefined) {\n        return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n      }\n      if (!IsWritableStream(destination)) {\n        return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n      }\n      let options;\n      try {\n        options = convertPipeOptions(rawOptions, 'Second parameter');\n      } catch (e) {\n        return promiseRejectedWith(e);\n      }\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n      }\n      if (IsWritableStreamLocked(destination)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n      }\n      return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n    }\n    /**\n     * Tees this readable stream, returning a two-element array containing the two resulting branches as\n     * new {@link ReadableStream} instances.\n     *\n     * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n     * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n     * propagated to the stream's underlying source.\n     *\n     * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n     * this could allow interference between the two branches.\n     */\n    tee() {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('tee');\n      }\n      const branches = ReadableStreamTee(this);\n      return CreateArrayFromList(branches);\n    }\n    values(rawOptions = undefined) {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('values');\n      }\n      const options = convertIteratorOptions(rawOptions, 'First parameter');\n      return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n    }\n  }\n  Object.defineProperties(ReadableStream.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    getReader: {\n      enumerable: true\n    },\n    pipeThrough: {\n      enumerable: true\n    },\n    pipeTo: {\n      enumerable: true\n    },\n    tee: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStream',\n      configurable: true\n    });\n  }\n  if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n      value: ReadableStream.prototype.values,\n      writable: true,\n      configurable: true\n    });\n  }\n  // Abstract operations for the ReadableStream.\n  // Throws if and only if startAlgorithm throws.\n  function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n    const stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    const controller = Object.create(ReadableStreamDefaultController.prototype);\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  }\n  // Throws if and only if startAlgorithm throws.\n  function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n    const stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    const controller = Object.create(ReadableByteStreamController.prototype);\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n    return stream;\n  }\n  function InitializeReadableStream(stream) {\n    stream._state = 'readable';\n    stream._reader = undefined;\n    stream._storedError = undefined;\n    stream._disturbed = false;\n  }\n  function IsReadableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n      return false;\n    }\n    return x instanceof ReadableStream;\n  }\n  function IsReadableStreamLocked(stream) {\n    if (stream._reader === undefined) {\n      return false;\n    }\n    return true;\n  }\n  // ReadableStream API exposed for controllers.\n  function ReadableStreamCancel(stream, reason) {\n    stream._disturbed = true;\n    if (stream._state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n    if (stream._state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    ReadableStreamClose(stream);\n    const reader = stream._reader;\n    if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n      reader._readIntoRequests.forEach(readIntoRequest => {\n        readIntoRequest._closeSteps(undefined);\n      });\n      reader._readIntoRequests = new SimpleQueue();\n    }\n    const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n    return transformPromiseWith(sourceCancelPromise, noop);\n  }\n  function ReadableStreamClose(stream) {\n    stream._state = 'closed';\n    const reader = stream._reader;\n    if (reader === undefined) {\n      return;\n    }\n    defaultReaderClosedPromiseResolve(reader);\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(readRequest => {\n        readRequest._closeSteps();\n      });\n      reader._readRequests = new SimpleQueue();\n    }\n  }\n  function ReadableStreamError(stream, e) {\n    stream._state = 'errored';\n    stream._storedError = e;\n    const reader = stream._reader;\n    if (reader === undefined) {\n      return;\n    }\n    defaultReaderClosedPromiseReject(reader, e);\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(readRequest => {\n        readRequest._errorSteps(e);\n      });\n      reader._readRequests = new SimpleQueue();\n    } else {\n      reader._readIntoRequests.forEach(readIntoRequest => {\n        readIntoRequest._errorSteps(e);\n      });\n      reader._readIntoRequests = new SimpleQueue();\n    }\n  }\n  // Helper functions for the ReadableStream.\n  function streamBrandCheckException$1(name) {\n    return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n  }\n  function convertQueuingStrategyInit(init, context) {\n    assertDictionary(init, context);\n    const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n    return {\n      highWaterMark: convertUnrestrictedDouble(highWaterMark)\n    };\n  }\n\n  // The size function must not have a prototype property nor be a constructor\n  const byteLengthSizeFunction = chunk => {\n    return chunk.byteLength;\n  };\n  try {\n    Object.defineProperty(byteLengthSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {\n    // This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of bytes in each chunk.\n   *\n   * @public\n   */\n  class ByteLengthQueuingStrategy {\n    constructor(options) {\n      assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    /**\n     * Returns the high water mark provided to the constructor.\n     */\n    get highWaterMark() {\n      if (!IsByteLengthQueuingStrategy(this)) {\n        throw byteLengthBrandCheckException('highWaterMark');\n      }\n      return this._byteLengthQueuingStrategyHighWaterMark;\n    }\n    /**\n     * Measures the size of `chunk` by returning the value of its `byteLength` property.\n     */\n    get size() {\n      if (!IsByteLengthQueuingStrategy(this)) {\n        throw byteLengthBrandCheckException('size');\n      }\n      return byteLengthSizeFunction;\n    }\n  }\n  Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ByteLengthQueuingStrategy',\n      configurable: true\n    });\n  }\n  // Helper functions for the ByteLengthQueuingStrategy.\n  function byteLengthBrandCheckException(name) {\n    return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n  }\n  function IsByteLengthQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n    return x instanceof ByteLengthQueuingStrategy;\n  }\n\n  // The size function must not have a prototype property nor be a constructor\n  const countSizeFunction = () => {\n    return 1;\n  };\n  try {\n    Object.defineProperty(countSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {\n    // This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of chunks.\n   *\n   * @public\n   */\n  class CountQueuingStrategy {\n    constructor(options) {\n      assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    /**\n     * Returns the high water mark provided to the constructor.\n     */\n    get highWaterMark() {\n      if (!IsCountQueuingStrategy(this)) {\n        throw countBrandCheckException('highWaterMark');\n      }\n      return this._countQueuingStrategyHighWaterMark;\n    }\n    /**\n     * Measures the size of `chunk` by always returning 1.\n     * This ensures that the total queue size is a count of the number of chunks in the queue.\n     */\n    get size() {\n      if (!IsCountQueuingStrategy(this)) {\n        throw countBrandCheckException('size');\n      }\n      return countSizeFunction;\n    }\n  }\n  Object.defineProperties(CountQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'CountQueuingStrategy',\n      configurable: true\n    });\n  }\n  // Helper functions for the CountQueuingStrategy.\n  function countBrandCheckException(name) {\n    return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n  }\n  function IsCountQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n    return x instanceof CountQueuingStrategy;\n  }\n  function convertTransformer(original, context) {\n    assertDictionary(original, context);\n    const flush = original === null || original === void 0 ? void 0 : original.flush;\n    const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n    const start = original === null || original === void 0 ? void 0 : original.start;\n    const transform = original === null || original === void 0 ? void 0 : original.transform;\n    const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n    return {\n      flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n      readableType,\n      start: start === undefined ? undefined : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n      transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n      writableType\n    };\n  }\n  function convertTransformerFlushCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => promiseCall(fn, original, [controller]);\n  }\n  function convertTransformerStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => reflectCall(fn, original, [controller]);\n  }\n  function convertTransformerTransformCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n  }\n\n  // Class TransformStream\n  /**\n   * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n   * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n   * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n   * made available for reading from the readable side.\n   *\n   * @public\n   */\n  class TransformStream {\n    constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\n      if (rawTransformer === undefined) {\n        rawTransformer = null;\n      }\n      const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n      const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n      const transformer = convertTransformer(rawTransformer, 'First parameter');\n      if (transformer.readableType !== undefined) {\n        throw new RangeError('Invalid readableType specified');\n      }\n      if (transformer.writableType !== undefined) {\n        throw new RangeError('Invalid writableType specified');\n      }\n      const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n      const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n      const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n      const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n      let startPromise_resolve;\n      const startPromise = newPromise(resolve => {\n        startPromise_resolve = resolve;\n      });\n      InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n      SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n      if (transformer.start !== undefined) {\n        startPromise_resolve(transformer.start(this._transformStreamController));\n      } else {\n        startPromise_resolve(undefined);\n      }\n    }\n    /**\n     * The readable side of the transform stream.\n     */\n    get readable() {\n      if (!IsTransformStream(this)) {\n        throw streamBrandCheckException('readable');\n      }\n      return this._readable;\n    }\n    /**\n     * The writable side of the transform stream.\n     */\n    get writable() {\n      if (!IsTransformStream(this)) {\n        throw streamBrandCheckException('writable');\n      }\n      return this._writable;\n    }\n  }\n  Object.defineProperties(TransformStream.prototype, {\n    readable: {\n      enumerable: true\n    },\n    writable: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStream',\n      configurable: true\n    });\n  }\n  function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n    function startAlgorithm() {\n      return startPromise;\n    }\n    function writeAlgorithm(chunk) {\n      return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n    }\n    function abortAlgorithm(reason) {\n      return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n    }\n    function closeAlgorithm() {\n      return TransformStreamDefaultSinkCloseAlgorithm(stream);\n    }\n    stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n    function pullAlgorithm() {\n      return TransformStreamDefaultSourcePullAlgorithm(stream);\n    }\n    function cancelAlgorithm(reason) {\n      TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n      return promiseResolvedWith(undefined);\n    }\n    stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n    // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n    stream._backpressure = undefined;\n    stream._backpressureChangePromise = undefined;\n    stream._backpressureChangePromise_resolve = undefined;\n    TransformStreamSetBackpressure(stream, true);\n    stream._transformStreamController = undefined;\n  }\n  function IsTransformStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n      return false;\n    }\n    return x instanceof TransformStream;\n  }\n  // This is a no-op if both sides are already errored.\n  function TransformStreamError(stream, e) {\n    ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n  }\n  function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n    TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n    WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n    if (stream._backpressure) {\n      // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n      // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n      // _backpressure is set.\n      TransformStreamSetBackpressure(stream, false);\n    }\n  }\n  function TransformStreamSetBackpressure(stream, backpressure) {\n    // Passes also when called during construction.\n    if (stream._backpressureChangePromise !== undefined) {\n      stream._backpressureChangePromise_resolve();\n    }\n    stream._backpressureChangePromise = newPromise(resolve => {\n      stream._backpressureChangePromise_resolve = resolve;\n    });\n    stream._backpressure = backpressure;\n  }\n  // Class TransformStreamDefaultController\n  /**\n   * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n   *\n   * @public\n   */\n  class TransformStreamDefaultController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n     */\n    get desiredSize() {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('desiredSize');\n      }\n      const readableController = this._controlledTransformStream._readable._readableStreamController;\n      return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n    }\n    enqueue(chunk = undefined) {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('enqueue');\n      }\n      TransformStreamDefaultControllerEnqueue(this, chunk);\n    }\n    /**\n     * Errors both the readable side and the writable side of the controlled transform stream, making all future\n     * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n     */\n    error(reason = undefined) {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('error');\n      }\n      TransformStreamDefaultControllerError(this, reason);\n    }\n    /**\n     * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n     * transformer only needs to consume a portion of the chunks written to the writable side.\n     */\n    terminate() {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('terminate');\n      }\n      TransformStreamDefaultControllerTerminate(this);\n    }\n  }\n  Object.defineProperties(TransformStreamDefaultController.prototype, {\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    terminate: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStreamDefaultController',\n      configurable: true\n    });\n  }\n  // Transform Stream Default Controller Abstract Operations\n  function IsTransformStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n      return false;\n    }\n    return x instanceof TransformStreamDefaultController;\n  }\n  function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n    controller._controlledTransformStream = stream;\n    stream._transformStreamController = controller;\n    controller._transformAlgorithm = transformAlgorithm;\n    controller._flushAlgorithm = flushAlgorithm;\n  }\n  function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n    const controller = Object.create(TransformStreamDefaultController.prototype);\n    let transformAlgorithm = chunk => {\n      try {\n        TransformStreamDefaultControllerEnqueue(controller, chunk);\n        return promiseResolvedWith(undefined);\n      } catch (transformResultE) {\n        return promiseRejectedWith(transformResultE);\n      }\n    };\n    let flushAlgorithm = () => promiseResolvedWith(undefined);\n    if (transformer.transform !== undefined) {\n      transformAlgorithm = chunk => transformer.transform(chunk, controller);\n    }\n    if (transformer.flush !== undefined) {\n      flushAlgorithm = () => transformer.flush(controller);\n    }\n    SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n  }\n  function TransformStreamDefaultControllerClearAlgorithms(controller) {\n    controller._transformAlgorithm = undefined;\n    controller._flushAlgorithm = undefined;\n  }\n  function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n    const stream = controller._controlledTransformStream;\n    const readableController = stream._readable._readableStreamController;\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n      throw new TypeError('Readable side is not in a state that permits enqueue');\n    }\n    // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n    // accept TransformStreamDefaultControllerEnqueue() calls.\n    try {\n      ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n    } catch (e) {\n      // This happens when readableStrategy.size() throws.\n      TransformStreamErrorWritableAndUnblockWrite(stream, e);\n      throw stream._readable._storedError;\n    }\n    const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n    if (backpressure !== stream._backpressure) {\n      TransformStreamSetBackpressure(stream, true);\n    }\n  }\n  function TransformStreamDefaultControllerError(controller, e) {\n    TransformStreamError(controller._controlledTransformStream, e);\n  }\n  function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n    const transformPromise = controller._transformAlgorithm(chunk);\n    return transformPromiseWith(transformPromise, undefined, r => {\n      TransformStreamError(controller._controlledTransformStream, r);\n      throw r;\n    });\n  }\n  function TransformStreamDefaultControllerTerminate(controller) {\n    const stream = controller._controlledTransformStream;\n    const readableController = stream._readable._readableStreamController;\n    ReadableStreamDefaultControllerClose(readableController);\n    const error = new TypeError('TransformStream terminated');\n    TransformStreamErrorWritableAndUnblockWrite(stream, error);\n  }\n  // TransformStreamDefaultSink Algorithms\n  function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n    const controller = stream._transformStreamController;\n    if (stream._backpressure) {\n      const backpressureChangePromise = stream._backpressureChangePromise;\n      return transformPromiseWith(backpressureChangePromise, () => {\n        const writable = stream._writable;\n        const state = writable._state;\n        if (state === 'erroring') {\n          throw writable._storedError;\n        }\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n      });\n    }\n    return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n  }\n  function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n    // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n    // errored.\n    TransformStreamError(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n  function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n    // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n    const readable = stream._readable;\n    const controller = stream._transformStreamController;\n    const flushPromise = controller._flushAlgorithm();\n    TransformStreamDefaultControllerClearAlgorithms(controller);\n    // Return a promise that is fulfilled with undefined on success.\n    return transformPromiseWith(flushPromise, () => {\n      if (readable._state === 'errored') {\n        throw readable._storedError;\n      }\n      ReadableStreamDefaultControllerClose(readable._readableStreamController);\n    }, r => {\n      TransformStreamError(stream, r);\n      throw readable._storedError;\n    });\n  }\n  // TransformStreamDefaultSource Algorithms\n  function TransformStreamDefaultSourcePullAlgorithm(stream) {\n    // Invariant. Enforced by the promises returned by start() and pull().\n    TransformStreamSetBackpressure(stream, false);\n    // Prevent the next pull() call until there is backpressure.\n    return stream._backpressureChangePromise;\n  }\n  // Helper functions for the TransformStreamDefaultController.\n  function defaultControllerBrandCheckException(name) {\n    return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n  }\n  // Helper functions for the TransformStream.\n  function streamBrandCheckException(name) {\n    return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n  }\n  exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n  exports.CountQueuingStrategy = CountQueuingStrategy;\n  exports.ReadableByteStreamController = ReadableByteStreamController;\n  exports.ReadableStream = ReadableStream;\n  exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n  exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n  exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n  exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n  exports.TransformStream = TransformStream;\n  exports.TransformStreamDefaultController = TransformStreamDefaultController;\n  exports.WritableStream = WritableStream;\n  exports.WritableStreamDefaultController = WritableStreamDefaultController;\n  exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["SymbolPolyfill","Symbol","iterator","description","noop","undefined","getGlobals","self","window","global","globals","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","prototype","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","value","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","TypeError","Function","apply","promiseCall","QUEUE_MAX_ARRAY_SIZE","SimpleQueue","constructor","_cursor","_size","_front","_elements","_next","_back","length","push","element","oldBack","newBack","shift","oldFront","newFront","oldCursor","newCursor","elements","forEach","callback","i","node","peek","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","name","_closedPromise","_closedPromise_resolve","_closedPromise_reject","defaultReaderClosedPromiseResolve","AbortSteps","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","isDictionary","assertDictionary","obj","context","assertFunction","isObject","assertObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","integerPart","convertUnsignedLongLongWithEnforceRange","lowerBound","upperBound","MAX_SAFE_INTEGER","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","closed","defaultReaderBrandCheckException","cancel","read","resolvePromise","rejectPromise","_errorSteps","e","ReadableStreamDefaultReaderRead","releaseLock","Object","defineProperties","enumerable","toStringTag","defineProperty","configurable","hasOwnProperty","_disturbed","_readableStreamController","AsyncIteratorPrototype","getPrototypeOf","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","next","nextSteps","_nextSteps","return","returnSteps","_returnSteps","result","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","streamAsyncIteratorBrandCheckException","_asyncIteratorImpl","setPrototypeOf","AcquireReadableStreamAsyncIterator","impl","create","_a","NumberIsNaN","isNaN","CreateArrayFromList","slice","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","TransferArrayBuffer","O","IsDetachedBuffer","ArrayBufferSlice","buffer","begin","end","ArrayBuffer","IsNonNegativeNumber","CloneAsUint8Array","byteOffset","byteLength","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","Infinity","RangeError","PeekQueueValue","ResetQueue","ReadableStreamBYOBRequest","view","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","respond","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","respondWithNewView","isView","ReadableByteStreamControllerRespondWithNewView","ReadableByteStreamController","byobRequest","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","desiredSize","ReadableByteStreamControllerGetDesiredSize","close","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","enqueue","ReadableByteStreamControllerEnqueue","error","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","controller","shouldPull","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","pullPromise","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerPullInto","readIntoRequest","DataView","BYTES_PER_ELEMENT","ctor","ReadableStreamAddReadIntoRequest","emptyView","ReadableByteStreamControllerRespondInClosedState","firstDescriptor","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerRespondInReadableState","remainderSize","remainder","ReadableByteStreamControllerRespondInternal","descriptor","_started","firstPendingPullInto","transferredBuffer","transferredView","ReadableStreamError","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","startResult","r","SetUpReadableByteStreamControllerFromUnderlyingSource","underlyingByteSource","start","pull","request","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","_readIntoRequests","IsReadableStreamBYOBReader","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSink","original","abort","type","write","convertUnderlyingSinkAbortCallback","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","isAbortSignal","aborted","supportsAbortController","AbortController","createAbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","InitializeWritableStream","sizeAlgorithm","SetUpWritableStreamDefaultControllerFromUnderlyingSink","locked","streamBrandCheckException$2","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","getWriter","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","CreateWritableStream","writeAlgorithm","closeAlgorithm","abortAlgorithm","WritableStreamDefaultController","SetUpWritableStreamDefaultController","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","WritableStreamDefaultControllerClose","WritableStreamAddWriteRequest","writeRequest","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamFinishInFlightClose","defaultWriterClosedPromiseResolve","WritableStreamFinishInFlightCloseWithError","WritableStreamMarkCloseRequestInFlight","WritableStreamMarkFirstWriteRequestInFlight","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseReset","_ownerWritableStream","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseInitializeAsResolved","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterCloseWithErrorPropagation","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","WritableStreamDefaultControllerGetDesiredSize","releasedError","chunkSize","WritableStreamDefaultControllerGetChunkSize","WritableStreamDefaultControllerWrite","closeSentinel","abortReason","IsWritableStreamDefaultController","defaultControllerBrandCheckException$2","signal","_controlledWritableStream","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","_strategySizeAlgorithm","_writeAlgorithm","_closeAlgorithm","WritableStreamDefaultControllerGetBackpressure","startPromise","WritableStreamDefaultControllerAdvanceQueueIfNeeded","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","enqueueE","WritableStreamDefaultControllerProcessClose","WritableStreamDefaultControllerProcessWrite","sinkClosePromise","sinkWritePromise","streamBrandCheckException","defaultControllerBrandCheckException","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException","isDOMExceptionConstructor","createDOMExceptionPolyfill","message","Error","captureStackTrace","writable","DOMException$1","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","map","action","addEventListener","pipeLoop","resolveLoop","rejectLoop","pipeStep","resolveRead","rejectRead","isOrBecomesErrored","shutdown","isOrBecomesClosed","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","removeEventListener","ReadableStreamDefaultController","IsReadableStreamDefaultController","defaultControllerBrandCheckException$1","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","ReadableStreamDefaultControllerHasBackpressure","SetUpReadableStreamDefaultController","SetUpReadableStreamDefaultControllerFromUnderlyingSource","underlyingSource","ReadableStreamTee","cloneForBranch2","ReadableByteStreamTee","ReadableStreamDefaultTee","reading","readAgain","canceled1","canceled2","reason1","reason2","branch1","branch2","resolveCancelPromise","cancelPromise","chunk1","chunk2","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","CreateReadableStream","readAgainForBranch1","readAgainForBranch2","forwardReaderError","thisReader","pullWithDefaultReader","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","otherCanceled","clonedChunk","CreateReadableByteStream","convertUnderlyingDefaultOrByteSource","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReaderOptions","options","mode","convertReadableStreamReaderMode","convertIteratorOptions","Boolean","convertPipeOptions","assertAbortSignal","convertReadableWritablePair","readable","ReadableStream","rawUnderlyingSource","InitializeReadableStream","streamBrandCheckException$1","getReader","rawOptions","pipeThrough","rawTransform","transform","pipeTo","destination","tee","branches","values","asyncIterator","sourceCancelPromise","convertQueuingStrategyInit","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformer","flush","readableType","writableType","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","InitializeTransformStream","SetUpTransformStreamDefaultControllerFromTransformer","_transformStreamController","IsTransformStream","_readable","_writable","TransformStreamDefaultSinkWriteAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise","_backpressureChangePromise_resolve","TransformStreamSetBackpressure","TransformStreamError","TransformStreamDefaultControllerClearAlgorithms","TransformStreamDefaultController","IsTransformStreamDefaultController","readableController","_controlledTransformStream","TransformStreamDefaultControllerEnqueue","TransformStreamDefaultControllerError","terminate","TransformStreamDefaultControllerTerminate","SetUpTransformStreamDefaultController","transformAlgorithm","flushAlgorithm","_transformAlgorithm","_flushAlgorithm","transformResultE","TransformStreamDefaultControllerPerformTransform","transformPromise","backpressureChangePromise","flushPromise"],"sources":["../src/stub/symbol.ts","../src/utils.ts","../src/lib/helpers/miscellaneous.ts","../src/lib/helpers/webidl.ts","../src/lib/simple-queue.ts","../src/lib/readable-stream/generic-reader.ts","../src/lib/abstract-ops/internal-methods.ts","../src/stub/number-isfinite.ts","../src/stub/math-trunc.ts","../src/lib/validators/basic.ts","../src/lib/validators/readable-stream.ts","../src/lib/readable-stream/default-reader.ts","../src/target/es2018/stub/async-iterator-prototype.ts","../src/lib/readable-stream/async-iterator.ts","../src/stub/number-isnan.ts","../src/lib/abstract-ops/ecmascript.ts","../src/lib/abstract-ops/miscellaneous.ts","../src/lib/abstract-ops/queue-with-sizes.ts","../src/lib/readable-stream/byte-stream-controller.ts","../src/lib/readable-stream/byob-reader.ts","../src/lib/abstract-ops/queuing-strategy.ts","../src/lib/validators/queuing-strategy.ts","../src/lib/validators/underlying-sink.ts","../src/lib/validators/writable-stream.ts","../src/lib/abort-signal.ts","../src/lib/writable-stream.ts","../src/stub/native.ts","../src/stub/dom-exception.ts","../src/lib/readable-stream/pipe.ts","../src/lib/readable-stream/default-controller.ts","../src/lib/readable-stream/tee.ts","../src/lib/validators/underlying-source.ts","../src/lib/validators/reader-options.ts","../src/lib/validators/iterator-options.ts","../src/lib/validators/pipe-options.ts","../src/lib/validators/readable-writable-pair.ts","../src/lib/readable-stream.ts","../src/lib/validators/queuing-strategy-init.ts","../src/lib/byte-length-queuing-strategy.ts","../src/lib/count-queuing-strategy.ts","../src/lib/validators/transformer.ts","../src/lib/transform-stream.ts"],"sourcesContent":["/// <reference lib=\"es2015.symbol\" />\n\nconst SymbolPolyfill: (description?: string) => symbol =\n  typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n    Symbol :\n    description => `Symbol(${description})` as any as symbol;\n\nexport default SymbolPolyfill;\n","/// <reference lib=\"dom\" />\n\nexport function noop(): undefined {\n  return undefined;\n}\n\nfunction getGlobals() {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n","import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\n/* eslint-disable @typescript-eslint/no-empty-function */\nexport const AsyncIteratorPrototype: AsyncIterable<any> | undefined =\n  Object.getPrototypeOf(Object.getPrototypeOf(async function* (): AsyncIterableIterator<any> {}).prototype);\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CanTransferArrayBuffer(O: ArrayBufferLike): boolean {\n  return true;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean {\n  return false;\n}\n\nexport function ArrayBufferSlice(buffer: ArrayBufferLike, begin: number, end: number): ArrayBufferLike {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n","import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: ArrayBufferView): Uint8Array {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  // try {\n  const buffer = TransferArrayBuffer(view.buffer);\n  // } catch (e) {\n  //   readIntoRequest._errorSteps(e);\n  //   return;\n  // }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n  }\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { AbortController, AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort();\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined =\n  typeof DOMException !== 'undefined' ? DOMException : undefined;\n","/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line no-redeclare\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n","import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  IsReadableStream,\n  ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(stream: ReadableStream<R>,\n                                            cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk1\n            );\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk2\n            );\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<Uint8Array> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<Uint8Array>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<Uint8Array> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: ArrayBufferView, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<Uint8Array>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<ArrayBufferView> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n","import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\ntry {\n  Object.defineProperty(byteLengthSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\ntry {\n  Object.defineProperty(countSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n","import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(\n    stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n    e\n  );\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}